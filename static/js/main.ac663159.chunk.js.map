{"version":3,"sources":["components/Navigation.js","components/AlertBox.js","components/SearchBox.js","components/json/chart.js","components/VoteResultProgress.js","components/Vote.js","components/VoteList.js","components/Room.js","components/RoomList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","Navbar","bg","variant","Brand","href","this","props","children","Toggle","Collapse","className","Text","user","nickname","React","Component","AlertBox","newProps","newState","data","console","log","Card","Header","Body","Alert","Heading","SearchBox","state","searchType","placeholder","onSearchTypeChange","bind","onSearchSubmit","e","setState","target","value","preventDefault","onSubmit","currentTarget","_content","item","title","url_name","isLoading","Spinner","animation","Form","Control","required","type","name","Group","Check","inline","label","id","onChange","checked","Button","BackgroundColorPreset","VoteResultProgress","colors","voted","sum","i","length","_bars","push","ProgressBar","animated","key","now","Vote","open","choice","setOpen","onChoiceChange","onVoteSubmit","_open","_contents","_data","datasets","backgroundColor","labels","_choices","_choiceList","contents","split","sid","idx","onClick","aria-controls","aria-expanded","in","VoteList","_voteList","items","Room","master_nickname","part_num","RoomList","onRoomClick","dataset","roomList","Nav","Link","data-sid","defaultActiveKey","Main","Container","Row","Col","sm","App","email","searchResult","voteList","alertList","search","updateVoteList","getVoteResult","parseResponse","fetch","then","res","json","_roomList","Object","assign","searchWord","url","isNaN","continuous","contents_number","vote_id","resBody","method","headers","body","JSON","stringify","result","alert","message","xs","md","room-list-data","vote-list-data","callback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ac663159.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Navbar} from 'react-bootstrap';\r\nimport './style/Navigation.css';\r\n\r\nclass Navigation extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"primary\" variant=\"dark\">\r\n                <Navbar.Brand href={this.props.href}>{this.props.children}</Navbar.Brand>\r\n                <Navbar.Toggle />\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text>\r\n                        Signed in as: \r\n                        <p className=\"nav-user\">{this.props.user.nickname}</p>\r\n                    </Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport {Card, Alert} from 'react-bootstrap';\r\n\r\nclass AlertBox extends React.Component {\r\n    shouldComponentUpdate(newProps, newState){\r\n        if(newProps.data === this.props.data)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    render() {\r\n        console.log(\"alert box updated\");\r\n        return (\r\n            <Card>\r\n                <Card.Header>알림</Card.Header>\r\n                <Card.Body>\r\n                <Alert variant='danger'>\r\n                    <Alert.Heading>공지</Alert.Heading>\r\n                    알림 기능은 추후 개발될 예정입니다ㅠ\r\n                </Alert>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default AlertBox;","import React from 'react';\r\nimport {Card, Form, Button, Spinner} from 'react-bootstrap';\r\nimport './style/SearchBox.css';\r\n\r\nclass SearchBox extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            searchType : 'room',\r\n            placeholder : 'room을 입력하세요.'\r\n        }\r\n        this.onSearchTypeChange = this.onSearchTypeChange.bind(this);\r\n        this.onSearchSubmit = this.onSearchSubmit.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(newProps, newState){\r\n        if(newProps.data === this.props.data && newState === this.state)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    onSearchTypeChange(e){\r\n        this.setState({\r\n            searchType : e.target.value,\r\n            placeholder : e.target.value+'을 입력하세요.'\r\n        });\r\n    }\r\n\r\n    onSearchSubmit(e){\r\n        e.preventDefault();\r\n        this.props.onSubmit(e.currentTarget['search-word'].value,e.currentTarget['search-type'].value);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"search box updated\");\r\n        \r\n        let _content = null;\r\n        if(this.props.data.item.title!==null){\r\n            _content = <>\r\n                    제목: {this.props.data.item.title} URL: {this.props.data.item.url_name}\r\n                </>;\r\n        }\r\n\r\n        if(this.props.data.isLoading){\r\n            _content = <Spinner animation=\"border\" variant=\"primary\"/>;\r\n        }\r\n\r\n        return (\r\n            <Card>\r\n                <Card.Header>검색</Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={this.onSearchSubmit}>\r\n                        <Form.Control required type=\"text\" placeholder={this.state.placeholder} name=\"search-word\"/>\r\n                        <Form.Group>\r\n                            <Form.Check inline label=\"Room\" type='radio' id='radio-1' \r\n                                name=\"search-type\" value=\"room\"\r\n                                onChange={this.onSearchTypeChange}\r\n                                checked={this.state.searchType === 'room'}/>\r\n                            <Form.Check inline label=\"Simpoll\" type='radio' id='radio-2' \r\n                                name=\"search-type\" value=\"simpoll\"\r\n                                onChange={this.onSearchTypeChange}\r\n                                checked={this.state.searchType === 'simpoll'}/>\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Search!\r\n                            </Button>\r\n                        </Form.Group>\r\n                    </Form>\r\n                    <div className=\"search-box-content\">\r\n                        {_content}\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default SearchBox;","var BackgroundColorPreset = [\r\n    \"rgba(255, 99, 132, 0.8)\",\r\n    \"rgba(54, 162, 235, 0.8)\",\r\n    \"rgba(255, 206, 86, 0.8)\",\r\n    \"rgba(75, 192, 192, 0.8)\",\r\n    \"rgba(153, 102, 255, 0.8)\",\r\n    \"rgba(255, 159, 64, 0.8)\"\r\n]\r\n\r\nexport default BackgroundColorPreset;","import React from 'react';\r\nimport {ProgressBar} from 'react-bootstrap';\r\n\r\nclass VoteResultProgress extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            colors : [\"success\", \"warning\", \"danger\", \"info\", \"primary\"]\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.data.voted){\r\n            return null;\r\n        }\r\n\r\n        if(this.props.data.label == null){\r\n            return null;\r\n        }\r\n\r\n        let sum = 0;\r\n        for(let i=0;i<this.props.data.label.length;i++){\r\n            sum += this.props.data.data[i];\r\n        }\r\n        \r\n        let _bars = [];\r\n        if(sum != 0){\r\n            for(let i=0;i<this.props.data.label.length;i++){\r\n                _bars.push(\r\n                    <ProgressBar animated key={(i+1)}\r\n                        variant={this.state.colors[(i%this.state.colors.length)]} \r\n                        now={(this.props.data.data[i]*100/sum)} \r\n                        label={this.props.data.label[i]} />\r\n                    );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <ProgressBar>\r\n                {_bars}        \r\n            </ProgressBar>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default VoteResultProgress;","import React from 'react';\r\nimport {Button, Collapse, Form} from 'react-bootstrap';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './style/Vote.css';\r\nimport BackgroundColorPreset from './json/chart';\r\nimport VoteResultProgress from './VoteResultProgress';\r\n\r\nclass Vote extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            choice: 1\r\n        };\r\n        this.setOpen = this.setOpen.bind(this);\r\n        this.onChoiceChange = this.onChoiceChange.bind(this);\r\n        this.onVoteSubmit = this.onVoteSubmit.bind(this);\r\n    }\r\n\r\n    // shouldComponentUpdate(newProps, newState){\r\n    //     if(newProps.data === this.props.data && newState === this.state)\r\n    //         return false;\r\n    //     else\r\n    //         return true;\r\n    // }\r\n\r\n    setOpen(_open){\r\n        this.setState({\r\n            open: _open\r\n        })\r\n    }\r\n\r\n    onChoiceChange(e){\r\n        this.setState({\r\n            choice: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    onVoteSubmit(e){\r\n        e.preventDefault();\r\n        this.props.onVoteSubmit(e);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"vote\");\r\n        console.log(this.props.data);\r\n        let _contents = null;\r\n\r\n        if(this.props.data.voted){\r\n            let _data = {\r\n                datasets:[{\r\n                    backgroundColor: BackgroundColorPreset,\r\n                    data: this.props.data.data\r\n                }],\r\n                labels: this.props.data.label\r\n            }\r\n            _contents = <Doughnut data={_data} />;\r\n        }else{\r\n            let _choices = [];\r\n            let _choiceList = this.props.data.contents.split('|')\r\n            for(let i=0;i<_choiceList.length;i++){\r\n                _choices.push(\r\n                    <Form.Check \r\n                        key={(i+1)}\r\n                        label={_choiceList[i]} \r\n                        type='radio' \r\n                        id={'vote-'+this.props.data.sid+'-radio-1'} \r\n                        name=\"contents_number\" value={(i+1)}\r\n                        onChange={this.onChoiceChange}\r\n                        checked={this.state.choice == (i+1)}/>\r\n                )\r\n            }\r\n            _contents = <Form onSubmit={this.onVoteSubmit}>\r\n                <Form.Group>\r\n                {_choices}\r\n                </Form.Group>\r\n                <input type=\"hidden\" name=\"vote_id\" value={this.props.data.sid}/>\r\n                <input type=\"hidden\" name=\"idx\" value={(this.props.idx)}/>\r\n                <Button variant=\"success\" type=\"submit\">Submit!</Button>\r\n                </Form>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"vote-container\">\r\n                <h5>{this.props.data.title}</h5>\r\n                <VoteResultProgress data={this.props.data}/>\r\n                <Button\r\n                    variant='light'\r\n                    onClick={() => this.setOpen(!this.state.open)}\r\n                    aria-controls={\"collapse-vote-\"+this.props.data.sid}\r\n                    aria-expanded={this.state.open}\r\n                >V</Button>\r\n                <Collapse in={this.state.open}>\r\n                    <div id={\"collapse-vote-\"+this.props.data.sid}>\r\n                        {_contents}\r\n                    </div>\r\n                </Collapse>\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Vote;","import React from 'react';\r\nimport {Spinner} from 'react-bootstrap';\r\nimport Vote from './Vote';\r\n\r\nclass VoteList extends React.Component {\r\n    render() {\r\n        let _contents = [];\r\n\r\n        if(this.props.data.isLoading){\r\n            _contents = <Spinner animation=\"border\" variant=\"primary\"/>;\r\n        }else{\r\n            let _voteList = this.props.data.items;\r\n            for(let i=0;i<_voteList.length;i++){\r\n                _contents.push(\r\n                    <Vote data={_voteList[i]} key={(i+1)} idx={i} onVoteSubmit={this.props.onVoteSubmit}/>\r\n                ) \r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {_contents}\r\n            </>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default VoteList;","import React from 'react';\r\n\r\nclass Room extends React.Component {\r\n    render() {\r\n        console.log(\"room \"+this.props.data.title+\" is updated\");\r\n        return ( \r\n            <>\r\n                <h4>{this.props.data.title}</h4>\r\n                <h5>방장: {this.props.data.master_nickname}</h5>\r\n                <h5>참여인원: {this.props.data.part_num}명</h5>\r\n            </>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Room;","import React from 'react';\r\nimport {Spinner, Nav} from 'react-bootstrap';\r\nimport Room from './Room';\r\n\r\nclass RoomList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.onRoomClick = this.onRoomClick.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(newProps, newState){\r\n        if(newProps.data === this.props.data)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    onRoomClick(e){\r\n        e.preventDefault();\r\n        this.props.onRoomClick(e.currentTarget.dataset.sid);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"room list is updated\");\r\n\r\n        let _contents = [];\r\n        if(this.props.data.isLoading){\r\n            _contents = <Spinner animation=\"border\" variant=\"primary\"/>;\r\n        }else{\r\n            let roomList = this.props.data.items;\r\n            for(let i=0;i<roomList.length;i++){\r\n                _contents.push(\r\n                    <Nav.Link \r\n                        key={(i+1)} href={\"#room-link\"+(i+1)}\r\n                        onClick={this.onRoomClick}\r\n                        data-sid={this.props.data.items[i].sid}>\r\n                            <Room data={this.props.data.items[i]} key={(i+1)}/>\r\n                    </Nav.Link>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Nav className=\"flex-column\" variant=\"pills\" defaultActiveKey=\"#room-link1\">\r\n                {_contents}\r\n            </Nav>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default RoomList;","import React from 'react';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport VoteList from './VoteList';\r\nimport RoomList from './RoomList';\r\nimport './style/Main.css';\r\n\r\nclass Main extends React.Component {\r\n    render() {\r\n        console.log(\"Main is updated\");\r\n\r\n        return (\r\n            <Container className=\"main-container\">\r\n                <Row>\r\n                    <Col sm={4}>\r\n                        <h3>Room</h3>\r\n                        <RoomList \r\n                            data={this.props['room-list-data']} \r\n                            onRoomClick={this.props.onRoomClick}/>\r\n                    </Col>\r\n                    <Col sm={8}>\r\n                        <h3>Simpoll</h3>\r\n                        <VoteList \r\n                            data={this.props['vote-list-data']} \r\n                            onVoteSubmit={this.props['onVoteSubmit']}/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport Navigation from './components/Navigation'\nimport AlertBox from './components/AlertBox'\nimport SearchBox from './components/SearchBox'\nimport Main from './components/Main'\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            user: {\n                email: null,\n                name: null,\n                nickname: null\n            },\n            searchResult:{\n                isLoading: false,\n                item: {\n                    \"title\":null,\n                    \"cur_name\":null\n                }\n            },\n            roomList: {\n                isLoading: false,\n                items: []\n            },\n            voteList: {\n                isLoading: false,\n                items: []\n            },\n            alertList: {\n                isLoading: false,\n                items: []\n            }\n        }\n\n        this.search = this.search.bind(this);\n        this.updateVoteList = this.updateVoteList.bind(this);\n        this.getVoteResult = this.getVoteResult.bind(this);\n        this.onVoteSubmit = this.onVoteSubmit.bind(this);\n        this.parseResponse = this.parseResponse.bind(this);\n    }\n\n    componentDidMount(){\n        // get user from server\n        fetch(\"/index.php/api/user\")\n            .then((res)=>{\n                return res.json();\n            }).then(function(json){\n                this.parseResponse(json,function(data){\n                    this.setState({\n                        user: data\n                    });\n                }.bind(this));\n            }.bind(this));\n\n        // get room list from server\n        let _roomList = Object.assign({}, this.state.roomList, {isLoading:true});\n        this.setState({roomList:_roomList});\n        fetch(\"/index.php/api/find_user_rooms\")\n            .then((res)=>{\n                return res.json();\n            }).then(function(json){\n                this.parseResponse(json,function(data){\n                    this.setState({\n                        roomList:{\n                            isLoading: false,\n                            items: data\n                        }\n                    });\n                    if(data.length > 0)\n                        this.updateVoteList(data[0].sid);\n                }.bind(this));\n            }.bind(this));\n    }\n\n    search(searchWord, searchType){\n        this.setState({\n            searchResult:{\n                isLoading: true,\n                item: {}\n            }\n        });\n\n        let url = \"/index.php/api/\";\n        if(searchType == \"room\"){\n            url += \"room_\";\n        }else{\n            url += \"vote_\"\n        }\n\n        if(isNaN(searchWord)){\n            url += \"url/\"\n        }else{\n            url += \"page/\"\n        }\n\n        fetch(url+searchWord)\n            .then((res)=>{\n                return res.json();\n            }).then(function(json){\n                this.parseResponse(json,function(data){\n                    this.setState({\n                        searchResult:{\n                            isLoading: false,\n                            item: data\n                        }\n                    });\n                }.bind(this));\n            }.bind(this));\n    }\n\n    // update vote list\n    updateVoteList(sid){\n        this.setState({\n            voteList:{\n                isLoading: true,\n                items: []\n            }\n        });\n\n        fetch(\"/index.php/api/find_room_votes/\"+sid)\n            .then((res)=>{\n                return res.json();\n            }).then(function(json){\n                this.parseResponse(json,function(data){\n                    this.setState({\n                        voteList:{\n                            isLoading: false,\n                            items: data\n                        }\n                    });\n\n                    /* update already voted to result */\n                    this.getVoteResult(0,true);\n                }.bind(this));\n            }.bind(this));\n    }\n\n    // get vote result\n    // this will be called vote in vote list was voted by user\n    getVoteResult(idx, continuous){\n        if(idx >= this.state.voteList.items.length)\n            return;\n\n        // not voted\n        if(this.state.voteList.items[idx].voted === false){\n            this.getVoteResult(idx+1, continuous);\n            return;\n        }\n\n        // get vote sid\n        let sid = this.state.voteList.items[idx].sid;\n\n        // get vote result\n        fetch(\"/index.php/api/return_vote_result/\"+sid)\n            .then((res)=>{\n                return res.json();\n            }).then(function(json){\n                this.parseResponse(json,function(data){\n                    data.title = this.state.voteList.items[idx].title;\n                    this.state.voteList.items[idx] = data;\n                    this.setState({\n                        voteList: this.state.voteList\n                    });\n\n                    if(continuous)\n                        this.getVoteResult(idx+1,continuous);\n                }.bind(this));\n            }.bind(this));\n    }\n\n    // this will be called when vote is submitted\n    onVoteSubmit(e){\n        let contents_number = e.currentTarget['contents_number'].value;\n        let vote_id = e.currentTarget['vote_id'].value\n        let idx = e.currentTarget['idx'].value;\n        let resBody = {\n            \"contents_number\": contents_number,\n            \"vote_id\": vote_id\n        }\n        fetch(\"/index.php/api/voting\",{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(resBody)\n        }).then(function(res){\n            return res.json();\n        }).then(function(json){\n            if(json.result == \"success\"){\n                this.state.voteList.items[idx].voted = true;\n                this.getVoteResult(idx,false);\n            }else{\n                alert(json.message);\n            }\n        }.bind(this));\n\n    }\n\n    render() {\n        return (\n            <Container className=\"p-0\">\n                <Navigation user={this.state.user} href=\"/index.php/home\">Simpoll</Navigation>\n                <Row className=\"m-2\">\n                    <Col xs={12} md={6} className=\"p-1\">\n                        <AlertBox data={this.alertList}/>\n                    </Col>\n                    <Col xs={12} md={6} className=\"p-1\">\n                        <SearchBox onSubmit={this.search} data={this.state.searchResult}/>\n                    </Col>\n                </Row>\n                <Row className=\"m-2\">\n                    <Main \n                        room-list-data={this.state.roomList} \n                        onRoomClick={this.updateVoteList}\n                        vote-list-data={this.state.voteList} \n                        onVoteSubmit={this.onVoteSubmit}\n                    />\n                </Row>\n            </Container>\n        );\n    }\n\n    parseResponse(res, callback){\n        if(res.result == \"success\"){\n            callback(res.data);\n        }else{\n            alert(res.message);\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
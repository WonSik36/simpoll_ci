{"version":3,"sources":["components/Navigation.js","components/AlertBox.js","components/SearchBox.js","components/json/chart.js","components/SimpollResultAudience.js","components/SimpollResultSpeaker.js","components/SimpollResultProgress.js","components/SimpollChoice.js","components/SimpollList.js","components/Room.js","components/RoomList.js","components/MainAudience.js","components/RoomModal.js","components/SimpollModal.js","components/MainSpeaker.js","components/ModeButton.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","newProps","newState","user","this","props","Navbar","bg","variant","Brand","href","children","Toggle","Collapse","className","Text","nickname","React","Component","AlertBox","data","Card","Header","Body","Alert","Heading","SearchBox","state","searchType","placeholder","onSearchTypeChange","bind","onSearchSubmit","onAddRoom","e","setState","target","value","preventDefault","onSubmit","currentTarget","addRoom","item","sid","_content","title","master_nickname","part_num","Button","onClick","user_nickname","isLoading","Spinner","animation","Form","Control","required","type","name","Group","Check","inline","label","id","onChange","checked","BackgroundColorPreset","SimpollResultAudience","open","page","setOpen","disableLeftButton","disableRightButton","onSimpollRefresh","_open","idx","_arrow","_key","_mark","voted","i","questions","length","_count","_label","j","options","option_user_id","option_name","_data","datasets","backgroundColor","labels","push","key","question_title","width","height","_formGroup","question_type","_checked","defaultChecked","disabled","FormGroup","Label","isDisableLeftButton","isDisableRightButton","Container","Row","Col","xs","simpoll_id","url_name","deadline","aria-controls","aria-expanded","in","ButtonGroup","SimpollResultSpeaker","choice","onSimpollDelete","isDeadlinePass","count","_choices","str","k","option_user_nickname","Table","striped","bordered","hover","SimpollChoice","onChoiceChange","onSimpollSubmit","option_id","SimpollList","_contents","_simpollList","items","isAudience","Room","showModal","onRoomDelete","updateModal","closeModal","openModal","show","_deleteBtn","Modal","onHide","closeButton","Title","Footer","RoomList","onRoomClick","dataset","roomList","Nav","Link","data-sid","defaultActiveKey","MainAudience","sm","RoomModal","authType","nameType","handleClose","handleShow","onChangeVoteCreateAuth","onChangeUserNameType","onRoomCreate","room","poll_create_auth","vote_create_auth","user_name_type","SimpolllModal","anonymousType","anonymousReadOnly","partAuthType","choice_no","onChangeAnonymousType","onChangePartAuthType","addOptions","deleteOptions","addQuestions","deleteQuestions","onSimpollCreate","onOptionChange","onQuestionTitleChange","onQuestionTypeChange","qidx","_options","oidx","splice","_questions","slice","_deadline","simpolll_end_date","simpolll_end_time","_is_comment_enable","comment_check","_is_anonymous","anonymous_check","simpolll","room_id","currentRoomId","is_anonymous","is_comment_enable","part_auth","InputGroup","FormControl","data-oidx","data-qidx","Append","readOnly","MainSpeaker","SimpollModal","ModeButton","onViewModeChange","persontype","_audienceVariant","_speackerVariant","viewmode","ButtonToolbar","ToggleButtonGroup","ToggleButton","data-persontype","App","email","searchResult","simpollList","alertList","fetchTemplate","getUserInfo","getRoomList","changeViewMode","search","getSimpollList","getSimpoll","submitSimpoll","createSimpoll","createRoom","deleteSimpoll","deleteRoom","participateRoom","parseSimpollList","parseSimpoll","parseQuestion","checkUserVoted","checkDeadlinePassed","sortSimpollList","url","requestBody","loadingState","callback","oldState","fetch","then","res","json","Promise","resolve","reject","result","Error","message","catch","err","alert","_roomList","Object","assign","searchWord","isNaN","_option_id","method","headers","body","JSON","stringify","simpoll","master","simpollId","roomId","user_id","sort","s1","s2","simpollId1","Number","simpollId2","parsedSimpllList","bIdx","eIdx","beforeSimpollId","parsedSimpoll","simpoll_title","create_date","questionId1","qustion_id","questionId2","beforeQuestionId","question_id","question","parsedQuestion","option","split","option_count","o1","o2","curDate","Date","deadlineDate","optionUserId","votedOrDeadlinePassed1","votedOrDeadlinePassed2","_main","room-list-data","simpoll-list-data","onUpdateChoice","updateChoice","md","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"oVA4BeA,G,qMAvBWC,EAAUC,GAC5B,OAAGD,EAASE,OAASC,KAAKC,MAAMF,O,+BAOhC,OACI,kBAACG,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,QACzB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAMN,KAAKC,MAAMK,MAAON,KAAKC,MAAMM,UACjD,kBAACL,EAAA,EAAOM,OAAR,MACA,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,UAAU,uBACvB,kBAACR,EAAA,EAAOS,KAAR,qBAEI,uBAAGD,UAAU,YAAYV,KAAKC,MAAMF,KAAKa,iB,GAhBxCC,IAAMC,Y,kBCsBhBC,E,8LAtBWlB,EAAUC,GAC5B,OAAGD,EAASmB,OAAShB,KAAKC,MAAMe,O,+BAOhC,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,qBACA,kBAACD,EAAA,EAAKE,KAAN,KACA,kBAACC,EAAA,EAAD,CAAOhB,QAAQ,UACX,kBAACgB,EAAA,EAAMC,QAAP,qBADJ,8G,GAbOR,IAAMC,W,0BCuFdQ,G,mBArFX,WAAYrB,GAAO,IAAD,8BACd,4CAAMA,KACDsB,MAAQ,CACTC,WAAa,OACbC,YAAc,8CAElB,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBARH,E,mFAWI9B,EAAUC,GAC5B,OAAGD,EAASmB,OAAShB,KAAKC,MAAMe,MAAQlB,IAAaE,KAAKuB,Q,yCAM3CO,GACf9B,KAAK+B,SAAS,CACVP,WAAaM,EAAEE,OAAOC,MACtBR,YAAcK,EAAEE,OAAOC,MAAM,6C,qCAItBH,GACXA,EAAEI,iBACFlC,KAAKC,MAAMkC,SAASL,EAAEM,cAAc,eAAeH,MAAMH,EAAEM,cAAc,eAAeH,S,gCAGlFH,GACNA,EAAEI,iBACFlC,KAAKC,MAAMoC,QAAQrC,KAAKC,MAAMe,KAAKsB,KAAKC,O,+BAIxC,IAAIC,EAAW,KAsBf,OArBgC,OAA7BxC,KAAKC,MAAMe,KAAKsB,KAAKG,QAEhBD,EADyB,SAA1BxC,KAAKuB,MAAMC,WACC,yBAAKd,UAAU,sBACV,2BAAIV,KAAKC,MAAMe,KAAKsB,KAAKG,OAAU,6BACnC,4CAFL,IAEiBzC,KAAKC,MAAMe,KAAKsB,KAAKI,gBAAgB,6BACjD,wDAHL,IAGmB1C,KAAKC,MAAMe,KAAKsB,KAAKK,SAAS,6BAChD,kBAACC,EAAA,EAAD,CAAQC,QAAS7C,KAAK6B,WAAtB,sBAGD,yBAAKnB,UAAU,sBACV,2BAAIV,KAAKC,MAAMe,KAAKsB,KAAKG,OAAU,6BACnC,kDAFL,IAEkBzC,KAAKC,MAAMe,KAAKsB,KAAKQ,cAAc,6BACpD,kBAACF,EAAA,EAAD,CAAQtC,KAAK,KAAb,0BAKjBN,KAAKC,MAAMe,KAAK+B,YACfP,EAAW,kBAACQ,EAAA,EAAD,CAASC,UAAU,SAAS7C,QAAQ,aAI/C,kBAACa,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,qBACA,kBAACD,EAAA,EAAKE,KAAN,KACI,kBAAC+B,EAAA,EAAD,CAAMf,SAAUnC,KAAK4B,gBACjB,kBAACsB,EAAA,EAAKC,QAAN,CAAcC,UAAQ,EAACC,KAAK,OAAO5B,YAAazB,KAAKuB,MAAME,YAAa6B,KAAK,gBAC7E,kBAACJ,EAAA,EAAKK,MAAN,CAAY7C,UAAU,OAClB,kBAACwC,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,MAAM,OAAOL,KAAK,QAAQM,GAAG,UAC5CL,KAAK,cAAcrB,MAAM,OACzB2B,SAAU5D,KAAK0B,mBACfmC,QAAmC,SAA1B7D,KAAKuB,MAAMC,aACxB,kBAAC0B,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,MAAM,UAAUL,KAAK,QAAQM,GAAG,UAC/CL,KAAK,cAAcrB,MAAM,UACzB2B,SAAU5D,KAAK0B,mBACfmC,QAAmC,YAA1B7D,KAAKuB,MAAMC,aACxB,kBAACoB,EAAA,EAAD,CAAQxC,QAAQ,UAAUiD,KAAK,UAA/B,aAKHb,Q,GA/ED3B,IAAMC,Y,gCCKfgD,G,MATa,CACxB,YACA,YACA,YACA,YACA,YACA,cCqNWC,E,YApNX,WAAY9D,GAAO,IAAD,8BACd,4CAAMA,KACDsB,MAAQ,CACTyC,MAAM,EACNC,KAAM,GAEV,EAAKC,QAAU,EAAKA,QAAQvC,KAAb,gBACf,EAAKwC,kBAAoB,EAAKA,kBAAkBxC,KAAvB,gBACzB,EAAKyC,mBAAqB,EAAKA,mBAAmBzC,KAAxB,gBAC1B,EAAK0C,iBAAmB,EAAKA,iBAAiB1C,KAAtB,gBATV,E,qEAYV2C,GACJtE,KAAK+B,SAAS,CACViC,KAAMM,M,0CAKV,OAAuB,IAApBtE,KAAKuB,MAAM0C,O,2CAOd,OAAuB,IAApBjE,KAAKuB,MAAM0C,O,uCAMDnC,GACbA,EAAEI,iBACFlC,KAAKC,MAAMoE,iBAAiBrE,KAAKC,MAAMsE,O,+BAGjC,IACFC,EADC,OAEDC,EAAO,EAGPD,EADDxE,KAAKuB,MAAMyC,KACF,0BAAMtD,UAAU,cAChB,uBAAGA,UAAU,uBAGb,0BAAMA,UAAU,cAChB,uBAAGA,UAAU,yBAGzB,IAAIgE,EAAQ,uBAAGhE,UAAU,iBACtBV,KAAKC,MAAMe,KAAK2D,QACfD,EAAQ,uBAAGhE,UAAU,yBAEzB,IAAI8B,EAAW,GACf,OAAOxC,KAAKuB,MAAM0C,MACd,KAAK,EACD,IAAI,IAAIW,EAAE,EAAEA,EAAE5E,KAAKC,MAAMe,KAAK6D,UAAUC,OAAOF,IAAI,CAI/C,IAHA,IAAIG,EAAS,GACTC,EAAS,GAELC,EAAE,EAAEA,EAAEjF,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGM,QAAQJ,OAAOG,IACtDF,EAAOE,GAAKjF,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGM,QAAQD,GAAGE,eAAeL,OACnEE,EAAOC,GAAKjF,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGM,QAAQD,GAAGG,YAGxD,IAAIC,EAAQ,CACRC,SAAS,CAAC,CACNC,gBAAiBzB,EACjB9C,KAAM+D,IAEVS,OAAQR,GAGZxC,EAASiD,KACL,yBAAKC,IAAKd,GACN,uBAAGc,IAAKd,GAAI5E,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGe,gBACzC,kBAAC,IAAD,CACA3E,KAAMqE,EACNO,MAAO,IACPC,OAAQ,OAKpB,MAEJ,KAAK,EACDrD,EAASiD,KAAK,uBAAGC,IAAKjB,KAAR,wBACd,IAAI,IAAIQ,EAAE,EAAEA,EAAEjF,KAAKC,MAAMe,KAAK6D,UAAUC,OAAOG,IAAI,CAC/C,IAAIa,EAAa,GACjB,GAAkD,MAA/C9F,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGc,cAC5B,IAAI,IAAInB,EAAE,EAAEA,EAAE5E,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQJ,OAAOF,IAAI,CAC1D,IAAIoB,EAAWhG,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGD,MAEvDmB,EAAWL,KACP,kBAACvC,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNiC,IAAKjB,IACLf,MAAO1D,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGQ,YAC/C/B,KAAK,QACLM,GAAI,WAAW3D,KAAKC,MAAMe,KAAK6D,UAAUI,GAAG1C,IAAI,WAAWqC,EAAE,GAC7DtB,KAAK,kBAAkBrB,MAAQ2C,EAAE,EACjCqB,eAAgBD,EAChBE,UAAU,UAGpB,GAAkD,MAA/ClG,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGc,cAClC,IAAI,IAAInB,EAAE,EAAEA,EAAE5E,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQJ,OAAOF,IAAI,CAC1D,IAAIoB,EAAWhG,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGD,MACvDmB,EAAWL,KACP,kBAACvC,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNiC,IAAKjB,IACLf,MAAO1D,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGQ,YAC/C/B,KAAK,WACLM,GAAI,WAAW3D,KAAKC,MAAMe,KAAK6D,UAAUI,GAAG1C,IAAI,cAAcqC,EAAE,GAChEtB,KAAK,kBAAkBrB,MAAQ2C,EAAE,EACjCqB,eAAgBD,EAChBE,UAAU,KAI1B1D,EAASiD,KACL,kBAACU,EAAA,EAAD,CAAWT,IAAKjB,KACZ,kBAACvB,EAAA,EAAKkD,MAAN,CAAYV,IAAKjB,KAASzE,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGU,gBACvD,6BACCG,KASrB,IAAIO,EAAsBrG,KAAKmE,oBAC3BmC,EAAuBtG,KAAKoE,qBAChC,OAEI,kBAACnD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaR,UAAU,OACnB,kBAAC6F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,0BAAMhG,UAAU,gBACXgE,IAGT,kBAAC+B,EAAA,EAAD,CAAKC,GAAI,EAAGhG,UAAU,OAClB,kBAAC8F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,2CADJ,KACgB1G,KAAKC,MAAMe,KAAKyB,MADhC,IACuC,6CADvC,KACqDzC,KAAKC,MAAMe,KAAK2F,WADrE,IACiF,kCADjF,KAC8F3G,KAAKC,MAAMe,KAAK4F,UAE9G,kBAACH,EAAA,EAAD,CAAKC,GAAI,IACL,uDADJ,KACkB1G,KAAKC,MAAMe,KAAK6F,YAI1C,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC9D,EAAA,EAAD,CACIxC,QAAQ,QAAQM,UAAU,kBAC1BmC,QAAS7C,KAAKqE,kBAEd,0BAAM3D,UAAU,gBACZ,uBAAGA,UAAU,uBAIzB,kBAAC+F,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC9D,EAAA,EAAD,CACIxC,QAAQ,QAAQM,UAAU,kBAC1BmC,QAAS,kBAAM,EAAKqB,SAAS,EAAK3C,MAAMyC,OACxC8C,gBAAe,oBAAoB9G,KAAKC,MAAMsE,IAC9CwC,gBAAe/G,KAAKuB,MAAMyC,MAEzBQ,OAMrB,kBAACvD,EAAA,EAAKE,KAAN,KACI,kBAACV,EAAA,EAAD,CAAUuG,GAAIhH,KAAKuB,MAAMyC,MACrB,yBAAKL,GAAI,oBAAoB3D,KAAKC,MAAMsE,KACpC,kBAAC0C,EAAA,EAAD,CAAavG,UAAU,eACnB,kBAACkC,EAAA,EAAD,CACIxC,QAAQ,QACR8F,SAAUG,EACVxD,QAAS,WAAW7C,KAAK+B,SAAS,CAACkC,KAAOjE,KAAKuB,MAAM0C,KAAK,KAAMtC,KAAK3B,OACrE,8BACI,uBAAGU,UAAU,0BAGrB,kBAACkC,EAAA,EAAD,CACIxC,QAAQ,QACR8F,SAAUI,EACVzD,QAAS,WAAW7C,KAAK+B,SAAS,CAACkC,KAAOjE,KAAKuB,MAAM0C,KAAK,KAAMtC,KAAK3B,OACrE,8BACI,uBAAGU,UAAU,4BAIxB8B,U,GA5MO3B,IAAMC,W,kBC8N3BoG,GCjOqBrG,IAAMC,U,YDKtC,WAAYb,GAAO,IAAD,8BACd,4CAAMA,KACDsB,MAAQ,CACTyC,MAAM,EACNmD,OAAQ,EACRlD,KAAM,GAEV,EAAKC,QAAU,EAAKA,QAAQvC,KAAb,gBACf,EAAKwC,kBAAoB,EAAKA,kBAAkBxC,KAAvB,gBACzB,EAAKyC,mBAAqB,EAAKA,mBAAmBzC,KAAxB,gBAC1B,EAAKyF,gBAAkB,EAAKA,gBAAgBzF,KAArB,gBACvB,EAAK0C,iBAAmB,EAAKA,iBAAiB1C,KAAtB,gBAXV,E,qEAcV2C,GACJtE,KAAK+B,SAAS,CACViC,KAAMM,M,0CAKV,OAAsB,GAAnBtE,KAAKuB,MAAM0C,O,2CAOd,OAAsB,GAAnBjE,KAAKuB,MAAM0C,O,sCAMFnC,GACZA,EAAEI,iBACFlC,KAAKC,MAAMmH,gBAAgBpH,KAAKC,MAAMe,KAAKuB,O,uCAG9BT,GACbA,EAAEI,iBACFlC,KAAKC,MAAMoE,iBAAiBrE,KAAKC,MAAMsE,KAAI,GAAM,K,+BAG3C,IACFC,EADC,OAGDA,EADDxE,KAAKuB,MAAMyC,KACF,0BAAMtD,UAAU,cAChB,uBAAGA,UAAU,uBAGb,0BAAMA,UAAU,cAChB,uBAAGA,UAAU,yBAGzB,IAAIgE,EAAQ,KACT1E,KAAKC,MAAMe,KAAKqG,iBACf3C,EAAQ,0BAAMhE,UAAU,gBACZ,uBAAGA,UAAU,mBAG7B,IAAI8B,EAAW,GACf,OAAOxC,KAAKuB,MAAM0C,MACd,KAAK,EACD,IAAI,IAAIW,EAAE,EAAEA,EAAE5E,KAAKC,MAAMe,KAAK6D,UAAUC,OAAOF,IAAI,CAI/C,IAHA,IAAIG,EAAS,GACTC,EAAS,GAELC,EAAE,EAAEA,EAAEjF,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGM,QAAQJ,OAAOG,IACtDF,EAAOE,GAAKjF,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGM,QAAQD,GAAGqC,MACpDtC,EAAOC,GAAKjF,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGM,QAAQD,GAAGG,YAGxD,IAAIC,EAAQ,CACRC,SAAS,CAAC,CACNC,gBAAiBzB,EACjB9C,KAAM+D,IAEVS,OAAQR,GAGZxC,EAASiD,KACL,yBAAKC,IAAKd,GACN,uBAAGc,IAAKd,GAAI5E,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGe,gBACzC,kBAAC,IAAD,CACA3E,KAAMqE,EACNO,MAAO,IACPC,OAAQ,OAKpB,MAEJ,KAAK,EAED,IADA,IAAIpB,EAAO,EACHQ,EAAE,EAAEA,EAAEjF,KAAKC,MAAMe,KAAK6D,UAAUC,OAAOG,IAAI,CAE/C,IADA,IAAIsC,EAAS,GACL3C,EAAE,EAAEA,EAAE5E,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQJ,OAAOF,IAAI,CAE1D,IADA,IAAI4C,EAAM,GACFC,EAAE,EAAEA,EAAEzH,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAG8C,qBAAqB5C,OAAO2C,IAC9ED,GAAOxH,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAG8C,qBAAqBD,GACjEA,IAAMzH,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAG8C,qBAAqB5C,OAAO,IACzE0C,GAAO,MAEfD,EAAS9B,KACL,wBAAIC,IAAKjB,KACL,wBAAIiB,IAAI,KAAK1F,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGQ,aACrD,wBAAIM,IAAI,KAAK1F,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAG0C,MAArD,WACA,wBAAI5B,IAAI,KAAK8B,KAKzBhF,EAASiD,KAAK,uBAAGC,IAAKjB,KAASzE,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGU,iBAC5DnD,EAASiD,KAAK,kBAACkC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACpC,IAAKjB,KACrC,+BACI,4BACI,wCACA,sCACA,wCAGR,+BACK8C,KAIrB,MACJ,KAAK,EACD/E,EAAW,oCAAE,6BAAK,6BAClB,kBAACpB,EAAA,EAAD,CAAOhB,QAAQ,UACf,kBAACgB,EAAA,EAAMC,QAAP,2FACA,0GACA,6BACA,yBAAKX,UAAU,8BACb,kBAACkC,EAAA,EAAD,CAAQC,QAAS7C,KAAKoH,gBAAiBhH,QAAQ,kBAA/C,aASV,IAAIiG,EAAsBrG,KAAKmE,oBAC3BmC,EAAuBtG,KAAKoE,qBAChC,OAEI,kBAACnD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaR,UAAU,OACnB,kBAAC6F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACJhC,GAGL,kBAAC+B,EAAA,EAAD,CAAKC,GAAI,EAAGhG,UAAU,OAClB,kBAAC8F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,2CADJ,KACgB1G,KAAKC,MAAMe,KAAKyB,MADhC,IACuC,6CADvC,KACqDzC,KAAKC,MAAMe,KAAKuB,IADrE,IAC0E,kCAD1E,KACuFvC,KAAKC,MAAMe,KAAK4F,UAEvG,kBAACH,EAAA,EAAD,CAAKC,GAAI,IACL,uDADJ,KACkB1G,KAAKC,MAAMe,KAAK6F,YAI1C,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC9D,EAAA,EAAD,CACIxC,QAAQ,QAAQM,UAAU,kBAC1BmC,QAAS7C,KAAKqE,kBAEd,0BAAM3D,UAAU,gBACZ,uBAAGA,UAAU,uBAIzB,kBAAC+F,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC9D,EAAA,EAAD,CACIxC,QAAQ,QAAQM,UAAU,kBAC1BmC,QAAS,kBAAM,EAAKqB,SAAS,EAAK3C,MAAMyC,OACxC8C,gBAAe,oBAAoB9G,KAAKC,MAAMsE,IAC9CwC,gBAAe/G,KAAKuB,MAAMyC,MAEzBQ,OAMrB,kBAACvD,EAAA,EAAKE,KAAN,KACI,kBAACV,EAAA,EAAD,CAAUuG,GAAIhH,KAAKuB,MAAMyC,MACrB,yBAAKL,GAAI,oBAAoB3D,KAAKC,MAAMsE,KACpC,kBAAC0C,EAAA,EAAD,CAAavG,UAAU,eACnB,kBAACkC,EAAA,EAAD,CACIxC,QAAQ,QACR8F,SAAUG,EACVxD,QAAS,WAAW7C,KAAK+B,SAAS,CAACkC,KAAOjE,KAAKuB,MAAM0C,KAAK,KAAMtC,KAAK3B,OACrE,8BACI,uBAAGU,UAAU,0BAGrB,kBAACkC,EAAA,EAAD,CACIxC,QAAQ,QACR8F,SAAUI,EACVzD,QAAS,WAAW7C,KAAK+B,SAAS,CAACkC,KAAOjE,KAAKuB,MAAM0C,KAAK,KAAMtC,KAAK3B,OACrE,8BACI,uBAAGU,UAAU,4BAIxB8B,U,GApNM3B,IAAMC,YE0I1BiH,E,YA5IX,WAAY9H,GAAO,IAAD,8BACd,4CAAMA,KACDsB,MAAQ,CACTyC,MAAM,EACNmD,OAAQ,GAEZ,EAAKjD,QAAU,EAAKA,QAAQvC,KAAb,gBACf,EAAKqG,eAAiB,EAAKA,eAAerG,KAApB,gBACtB,EAAKsG,gBAAkB,EAAKA,gBAAgBtG,KAArB,gBART,E,qEAWV2C,GACJtE,KAAK+B,SAAS,CACViC,KAAMM,M,qCAICxC,GACX9B,KAAK+B,SAAS,CACVoF,OAAQrF,EAAEM,cAAcH,U,sCAIhBH,GACZA,EAAEI,iBAGF,IADA,IAAIgD,EAAU,GACNN,EAAE,EAAEA,EAAE5E,KAAKC,MAAMe,KAAK6D,UAAUC,OAAOF,IAC3C,IAAI,IAAIK,EAAE,EAAEA,EAAEjF,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGM,QAAQJ,OAAOG,KACsC,IAAzFnD,EAAEM,cAAc,UAAUpC,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGM,QAAQD,GAAGiD,WAAWrE,SAC5EqB,EAAQO,KAAK3D,EAAEM,cAAc,UAAUpC,KAAKC,MAAMe,KAAK6D,UAAUD,GAAGM,QAAQD,GAAGiD,WAAWjG,OAItGjC,KAAKC,MAAMgI,gBAAgB,CACvB1D,IAAKvE,KAAKC,MAAMsE,IAChBvD,KAAMkE,M,+BAOV,IAHM,IA4CFV,EA5CC,OACDhC,EAAW,GACXiC,EAAO,EACHQ,EAAE,EAAEA,EAAEjF,KAAKC,MAAMe,KAAK6D,UAAUC,OAAOG,IAAI,CAC/C,IAAIa,EAAa,GAEjB,GAAkD,MAA/C9F,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGc,cAC5B,IAAI,IAAInB,EAAE,EAAEA,EAAE5E,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQJ,OAAOF,IACtDkB,EAAWL,KACP,kBAACvC,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNiC,IAAKjB,IACLf,MAAO1D,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGQ,YAC/C/B,KAAK,QACLM,GAAI,WAAW3D,KAAKC,MAAMe,KAAK6D,UAAUI,GAAG1C,IAAI,WAAWqC,EAAE,GAC7DtB,KAAM,UAAUtD,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGsD,UACxDjG,MAAOjC,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGsD,kBAGzD,GAAkD,MAA/ClI,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGc,cAClC,IAAI,IAAInB,EAAE,EAAEA,EAAE5E,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQJ,OAAOF,IACtDkB,EAAWL,KACP,kBAACvC,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNiC,IAAKjB,IACLf,MAAO1D,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGQ,YAC/C/B,KAAK,WACLM,GAAI,WAAW3D,KAAKC,MAAMe,KAAK6D,UAAUI,GAAG1C,IAAI,cAAcqC,EAAE,GAChEtB,KAAM,UAAUtD,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGsD,UACxDjG,MAAOjC,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGC,QAAQN,GAAGsD,aAM/D1F,EAASiD,KACL,kBAACU,EAAA,EAAD,CAAWT,IAAKT,GACZ,kBAAC/B,EAAA,EAAKkD,MAAN,KAAapG,KAAKC,MAAMe,KAAK6D,UAAUI,GAAGU,gBAC1C,6BACCG,IAeb,OARItB,EADDxE,KAAKuB,MAAMyC,KACF,0BAAMtD,UAAU,cAChB,uBAAGA,UAAU,uBAGb,0BAAMA,UAAU,cAChB,uBAAGA,UAAU,yBAIrB,kBAACO,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaR,UAAU,OACnB,kBAAC6F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACD,EAAA,EAAD,CAAKC,GAAI,GAAIhG,UAAU,OACnB,kBAAC8F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,2CADJ,KACgB1G,KAAKC,MAAMe,KAAKyB,MADhC,IACuC,6CADvC,KACqDzC,KAAKC,MAAMe,KAAKuB,IADrE,IAC0E,kCAD1E,KACuFvC,KAAKC,MAAMe,KAAK4F,UAEvG,kBAACH,EAAA,EAAD,CAAKC,GAAI,IACL,uDADJ,KACkB1G,KAAKC,MAAMe,KAAK6F,YAI1C,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC9D,EAAA,EAAD,CACIxC,QAAQ,QAAQM,UAAU,kBAC1BmC,QAAS,kBAAM,EAAKqB,SAAS,EAAK3C,MAAMyC,OACxC8C,gBAAe,oBAAoB9G,KAAKC,MAAMsE,IAC9CwC,gBAAe/G,KAAKuB,MAAMyC,MAEzBQ,OAOrB,kBAACvD,EAAA,EAAKE,KAAN,KACI,kBAACV,EAAA,EAAD,CAAUuG,GAAIhH,KAAKuB,MAAMyC,MACrB,yBAAKL,GAAI,oBAAoB3D,KAAKC,MAAMsE,KACpC,kBAACrB,EAAA,EAAD,CAAMf,SAAUnC,KAAKiI,iBACZzF,EACL,2BAAOa,KAAK,SAASC,KAAK,MAAMrB,MAAQjC,KAAKC,MAAMsE,MACnD,kBAAC3B,EAAA,EAAD,CAAQlC,UAAU,cAAcN,QAAQ,UAAUiD,KAAK,UAAvD,oB,GAnIJxC,IAAMC,WC8CnBqH,E,iLA1CP,IAAIC,EAAY,GAEhB,GAAGpI,KAAKC,MAAMe,KAAK+B,UACfqF,EAAY,kBAACpF,EAAA,EAAD,CAASC,UAAU,SAAS7C,QAAQ,gBAC/C,CACD,IAAIiI,EAAerI,KAAKC,MAAMe,KAAKsH,MACnC,GAAItI,KAAKC,MAAMsI,WAWX,IAAI,IAAI3D,EAAE,EAAEA,EAAEyD,EAAavD,OAAOF,IAC3ByD,EAAazD,GAAGD,OAAS0D,EAAazD,GAAGyC,eACxCe,EAAU3C,KACN,kBAAC,EAAD,CACIzE,KAAMqH,EAAazD,GACnBc,IAAMd,EAAE,EAAIL,IAAKK,EACjBP,iBAAkBrE,KAAKC,MAAMoE,oBAGrC+D,EAAU3C,KACN,kBAAC,EAAD,CAAezE,KAAMqH,EAAazD,GAAIc,IAAMd,EAAE,EAAIL,IAAKK,EAAGqD,gBAAiBjI,KAAKC,MAAMgI,wBApBlG,IAAI,IAAIrD,EAAE,EAAEA,EAAEyD,EAAavD,OAAOF,IAC9BwD,EAAU3C,KACN,kBAAC,EAAD,CACIzE,KAAMqH,EAAazD,GACnBc,IAAMd,EAAE,EAAIL,IAAKK,EACjBwC,gBAAiBpH,KAAKC,MAAMmH,gBAC5B/C,iBAAkBrE,KAAKC,MAAMoE,oBAqBjD,OACI,oCACK+D,O,GAtCSvH,IAAMC,W,kBCgEjB0H,E,YAlEX,WAAYvI,GAAO,IAAD,8BACd,4CAAMA,KACDsB,MAAQ,CACTkH,WAAW,GAGf,EAAKC,aAAe,EAAKA,aAAa/G,KAAlB,gBACpB,EAAKgH,YAAc,EAAKA,YAAYhH,KAAjB,gBACnB,EAAKiH,WAAa,EAAKA,WAAWjH,KAAhB,gBAClB,EAAKkH,UAAY,EAAKA,UAAUlH,KAAf,gBATH,E,0EAYLG,GACTA,EAAEI,iBACFlC,KAAK4I,aACL5I,KAAKC,MAAMyI,aAAa1I,KAAKC,MAAMe,KAAKuB,O,kCAGhCuG,GACR9I,KAAK+B,SAAS,CAAC0G,UAAUK,M,mCAIzB9I,KAAK2I,aAAY,K,kCAIjB3I,KAAK2I,aAAY,K,+BAIjB,IAAII,EAAa,KAuBjB,OAtBI/I,KAAKC,MAAMsI,aACXQ,EAAa,oCACT,kBAACnG,EAAA,EAAD,CAAQxC,QAAQ,QAAQM,UAAU,kBAAkBmC,QAAS7C,KAAK6I,WAC9D,8BAAM,uBAAGnI,UAAU,mBAEvB,kBAACsI,EAAA,EAAD,CAAOF,KAAM9I,KAAKuB,MAAMkH,UAAWQ,OAAQjJ,KAAK4I,YAC5C,kBAACI,EAAA,EAAM9H,OAAP,CAAcgI,aAAW,GACzB,kBAACF,EAAA,EAAMG,MAAP,8EAEA,kBAACH,EAAA,EAAM7H,KAAP,kGACA,kBAAC6H,EAAA,EAAMI,OAAP,KACA,kBAACxG,EAAA,EAAD,CAAQxC,QAAQ,YAAYyC,QAAS7C,KAAK4I,YAA1C,SAGA,kBAAChG,EAAA,EAAD,CAAQxC,QAAQ,SAASyC,QAAS7C,KAAK0I,cAAvC,cASR,oCACKK,EACD,4BAAK/I,KAAKC,MAAMe,KAAKyB,OACrB,6CAASzC,KAAKC,MAAMe,KAAK0B,iBACzB,yDAAW1C,KAAKC,MAAMe,KAAK2B,SAA3B,UACA,0CAAW3C,KAAKC,MAAMe,KAAKuB,IAA3B,SAAsCvC,KAAKC,MAAMe,KAAK4F,e,GA7DnD/F,IAAMC,WCiDVuI,E,YA/CX,WAAYpJ,GAAO,IAAD,8BACd,4CAAMA,KACDqJ,YAAc,EAAKA,YAAY3H,KAAjB,gBAFL,E,mFAKI9B,EAAUC,GAC5B,OAAGD,EAASmB,OAAShB,KAAKC,MAAMe,O,kCAMxBc,GACRA,EAAEI,iBACFlC,KAAKC,MAAMqJ,YAAYxH,EAAEM,cAAcmH,QAAQhH,IAAIvC,KAAKC,MAAMsI,c,+BAI9D,IAAIH,EAAY,GAChB,GAAGpI,KAAKC,MAAMe,KAAK+B,UACfqF,EAAY,kBAACpF,EAAA,EAAD,CAASC,UAAU,SAAS7C,QAAQ,iBAGhD,IADA,IAAIoJ,EAAWxJ,KAAKC,MAAMe,KAAKsH,MACvB1D,EAAE,EAAEA,EAAE4E,EAAS1E,OAAOF,IAC1BwD,EAAU3C,KACN,kBAACgE,EAAA,EAAIC,KAAL,CACIhE,IAAMd,EAAE,EAAItE,KAAM,cAAcsE,EAAE,GAClC/B,QAAS7C,KAAKsJ,YACdK,WAAU3J,KAAKC,MAAMe,KAAKsH,MAAM1D,GAAGrC,KAC/B,kBAAC,EAAD,CACIvB,KAAMhB,KAAKC,MAAMe,KAAKsH,MAAM1D,GAC5Bc,IAAMd,EAAE,EACR2D,WAAYvI,KAAKC,MAAMsI,WACvBG,aAAc1I,KAAKC,MAAMyI,iBAMjD,OACI,kBAACe,EAAA,EAAD,CAAK/I,UAAU,cAAcN,QAAQ,QAAQwJ,iBAAiB,eACzDxB,O,GA1CMvH,IAAMC,WC6Bd+I,G,uLAzBP,OACI,kBAACtD,EAAA,EAAD,CAAW7F,UAAU,kBACjB,kBAAC8F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKqD,GAAI,GACL,oCACA,kBAAC,EAAD,CACI9I,KAAMhB,KAAKC,MAAM,kBACjBqJ,YAAatJ,KAAKC,MAAMqJ,YACxBf,YAAY,KAEpB,kBAAC9B,EAAA,EAAD,CAAKqD,GAAI,GACL,uCACA,kBAAC,EAAD,CACI9I,KAAMhB,KAAKC,MAAM,qBACjBgI,gBAAiBjI,KAAKC,MAAL,gBACjBsI,YAAY,EACZlE,iBAAkBrE,KAAKC,MAAMoE,0B,GAlB9BxD,IAAMC,YCuHlBiJ,E,YAzHX,WAAY9J,GAAO,IAAD,8BACd,4CAAMA,KACDsB,MAAQ,CACTuH,MAAM,EACNkB,SAAU,IACVC,SAAU,KAGd,EAAKC,YAAc,EAAKA,YAAYvI,KAAjB,gBACnB,EAAKwI,WAAa,EAAKA,WAAWxI,KAAhB,gBAClB,EAAKyI,uBAAyB,EAAKA,uBAAuBzI,KAA5B,gBAC9B,EAAK0I,qBAAuB,EAAKA,qBAAqB1I,KAA1B,gBAC5B,EAAK2I,aAAe,EAAKA,aAAa3I,KAAlB,gBAZN,E,2EAgBd3B,KAAK+B,SAAS,CACV+G,MAAM,EACNkB,SAAU,IACVC,SAAU,Q,mCAKdjK,KAAK+B,SAAS,CAAC+G,MAAK,M,6CAGDhH,GACnB9B,KAAK+B,SAAS,CAACiI,SAAUlI,EAAEM,cAAcH,U,2CAGxBH,GACjB9B,KAAK+B,SAAS,CAACkI,SAAUnI,EAAEM,cAAcH,U,mCAGhCH,GACTA,EAAEI,iBACFlC,KAAKkK,cACL,IAIIK,EAAO,CACP9H,MALSX,EAAEM,cAAcK,MAAMR,MAM/B2E,SALW9E,EAAEM,cAAcwE,SAAS3E,MAMpCuI,iBALkB1I,EAAEM,cAAcqI,iBAAiBxI,MAMnDyI,eALgB5I,EAAEM,cAAcsI,eAAezI,OAOnDjC,KAAKC,MAAMqK,aAAaC,K,+BAIxB,OACI,oCACA,kBAAC3H,EAAA,EAAD,CAAQxC,QAAQ,QAAQM,UAAU,cAAcmC,QAAS7C,KAAKmK,YAC1D,8BACI,uBAAGzJ,UAAU,kBAGrB,kBAACsI,EAAA,EAAD,CAAOF,KAAM9I,KAAKuB,MAAMuH,KAAMG,OAAQjJ,KAAKkK,aACvC,kBAAClB,EAAA,EAAM9H,OAAP,CAAcgI,aAAW,GACrB,kBAACF,EAAA,EAAMG,MAAP,mBAEJ,kBAACjG,EAAA,EAAD,CAAMf,SAAUnC,KAAKsK,cACjB,kBAACtB,EAAA,EAAM7H,KAAP,KACI,kBAAC+B,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKkD,MAAN,kBACA,kBAAClD,EAAA,EAAKC,QAAN,CAAcG,KAAK,QAAQD,KAAK,OAAO5B,YAAY,4DAAe2B,UAAQ,KAE9E,kBAACF,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKkD,MAAN,YACA,kBAAClD,EAAA,EAAKC,QAAN,CAAcG,KAAK,WAAWD,KAAK,OAAO5B,YAAY,+CAE1D,kBAACyB,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKkD,MAAN,0CACA,kBAAClD,EAAA,EAAKM,MAAN,CACIH,KAAK,QACLC,KAAK,mBACLrB,MAAM,IACNyB,MAAM,qBACNG,QAAiC,MAAxB7D,KAAKuB,MAAMyI,SACpBpG,SAAU5D,KAAKoK,yBACnB,kBAAClH,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNJ,KAAK,QACLC,KAAK,mBACLrB,MAAM,IACNyB,MAAM,yCACNG,QAAiC,MAAxB7D,KAAKuB,MAAMyI,SACpBpG,SAAU5D,KAAKoK,0BAEvB,kBAAClH,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKkD,MAAN,wEACA,kBAAClD,EAAA,EAAKM,MAAN,CACIH,KAAK,QACLC,KAAK,iBACLrB,MAAM,IACNyB,MAAM,eACNG,QAAiC,MAAxB7D,KAAKuB,MAAM0I,SACpBrG,SAAU5D,KAAKqK,uBACnB,kBAACnH,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNJ,KAAK,QACLC,KAAK,iBACLrB,MAAM,IACNyB,MAAM,qBACNG,QAAiC,MAAxB7D,KAAKuB,MAAM0I,SACpBrG,SAAU5D,KAAKqK,yBAG3B,kBAACrB,EAAA,EAAMI,OAAP,KACI,kBAACxG,EAAA,EAAD,CAAQxC,QAAQ,YAAYyC,QAAS7C,KAAKkK,aAA1C,SACA,kBAACtH,EAAA,EAAD,CAAQxC,QAAQ,UAAUiD,KAAK,UAA/B,kB,GAjHAxC,IAAMC,W,iBCwSf6J,E,YAvSX,WAAY1K,GAAO,IAAD,8BACd,4CAAMA,KACDsB,MAAQ,CACTuH,MAAM,EACN8B,cAAe,IACfC,mBAAmB,EACnBC,aAAc,IACdjG,UAAU,CACN,CACIpC,MAAM,GACNsI,UAAW,EACXhF,cAAe,IACfb,QAAS,CAAC,GAAG,OAKzB,EAAKgF,YAAc,EAAKA,YAAYvI,KAAjB,gBACnB,EAAKwI,WAAa,EAAKA,WAAWxI,KAAhB,gBAClB,EAAKqJ,sBAAwB,EAAKA,sBAAsBrJ,KAA3B,gBAC7B,EAAKsJ,qBAAuB,EAAKA,qBAAqBtJ,KAA1B,gBAC5B,EAAKuJ,WAAa,EAAKA,WAAWvJ,KAAhB,gBAClB,EAAKwJ,cAAgB,EAAKA,cAAcxJ,KAAnB,gBACrB,EAAKyJ,aAAe,EAAKA,aAAazJ,KAAlB,gBACpB,EAAK0J,gBAAkB,EAAKA,gBAAgB1J,KAArB,gBACvB,EAAK2J,gBAAkB,EAAKA,gBAAgB3J,KAArB,gBACvB,EAAK4J,eAAiB,EAAKA,eAAe5J,KAApB,gBACtB,EAAK6J,sBAAwB,EAAKA,sBAAsB7J,KAA3B,gBAC7B,EAAK8J,qBAAuB,EAAKA,qBAAqB9J,KAA1B,gBA5Bd,E,2EAgCd3B,KAAK+B,SAAS,CACV+G,MAAM,EACN8B,cAAe,IACfC,mBAAmB,EACnBC,aAAc,IACd5F,QAAS,CAAC,GAAG,Q,mCAKjBlF,KAAK+B,SAAS,CAAC+G,MAAK,M,4CAGFhH,GACc,MAA7B9B,KAAKuB,MAAMqJ,cACV5K,KAAK+B,SAAS,CAAC6I,cAAe,MAE9B5K,KAAK+B,SAAS,CAAC6I,cAAe,Q,2CAGjB9I,GACY,MAA1BA,EAAEM,cAAcH,MACfjC,KAAK+B,SAAS,CACV+I,aAAchJ,EAAEM,cAAcH,MAC9B2I,cAAe,IACfC,mBAAmB,IAGvB7K,KAAK+B,SAAS,CACV+I,aAAchJ,EAAEM,cAAcH,MAC9B4I,mBAAmB,M,iCAIpB/I,GACPA,EAAEI,iBACF,IAAIwJ,EAAO5J,EAAEM,cAAcmH,QAAQmC,KAC/BC,EAAW3L,KAAKuB,MAAMsD,UAAU6G,GAAMxG,QAC1CyG,EAASA,EAAS7G,QAAU,GAC5B9E,KAAKuB,MAAMsD,UAAU6G,GAAMX,YAE3B/K,KAAK+B,SAAS,CACV8C,UAAW7E,KAAKuB,MAAMsD,c,oCAIhB/C,GACVA,EAAEI,iBACF,IAAIwJ,EAAO5J,EAAEM,cAAcmH,QAAQmC,KAC/BE,EAAO9J,EAAEM,cAAcmH,QAAQqC,KACnC5L,KAAKuB,MAAMsD,UAAU6G,GAAMxG,QAAQ2G,OAAOD,EAAK,GAC/C5L,KAAKuB,MAAMsD,UAAU6G,GAAMX,YAC3B/K,KAAK+B,SAAS,CACV8C,UAAW7E,KAAKuB,MAAMsD,c,mCAIjB/C,GACTA,EAAEI,iBACF,IAAI4J,EAAa9L,KAAKuB,MAAMsD,UAAUkH,QACtCD,EAAWA,EAAWhH,QAAU,CAC5BrC,MAAM,GACNsI,UAAW,EACXhF,cAAe,IACfb,QAAS,CAAC,GAAG,KAGjBlF,KAAK+B,SAAS,CAAC8C,UAAWiH,M,sCAGdhK,GACZA,EAAEI,iBACFlC,KAAKuB,MAAMsD,UAAUgH,OAAO/J,EAAEM,cAAcmH,QAAQmC,KAAK,GACzD1L,KAAK+B,SAAS,CAAC8C,UAAW7E,KAAKuB,MAAMsD,c,qCAG1B/C,GACX,IAAI4J,EAAO5J,EAAEM,cAAcmH,QAAQmC,KAC/BE,EAAO9J,EAAEM,cAAcmH,QAAQqC,KACnC5L,KAAKuB,MAAMsD,UAAU6G,GAAMxG,QAAQ0G,GAAQ9J,EAAEM,cAAcH,MAC3DjC,KAAK+B,SAAS,CAAC8C,UAAW7E,KAAKuB,MAAMsD,c,4CAGnB/C,GAClB,IAAIyC,EAAMzC,EAAEM,cAAcmH,QAAQmC,KAC9BjJ,EAAQX,EAAEM,cAAcH,MAC5BjC,KAAKuB,MAAMsD,UAAUN,GAAK9B,MAAQA,EAElCzC,KAAK+B,SAAS,CAAC8C,UAAW7E,KAAKuB,MAAMsD,c,2CAGpB/C,GACjB,IAAIyC,EAAMzC,EAAEM,cAAcmH,QAAQmC,KAC/B5J,EAAEM,cAAcyB,QACf7D,KAAKuB,MAAMsD,UAAUN,GAAKwB,cAAgB,IAE1C/F,KAAKuB,MAAMsD,UAAUN,GAAKwB,cAAgB,IAG9C/F,KAAK+B,SAAS,CAAC8C,UAAW7E,KAAKuB,MAAMsD,c,sCAGzB/C,GAEZA,EAAEI,iBACFlC,KAAKkK,cAEL,IAAI8B,EAAYlK,EAAEM,cAAc6J,kBAAkBhK,MAAM,IAAIH,EAAEM,cAAc8J,kBAAkBjK,MAC1FkK,EAAqB,IACtBrK,EAAEM,cAAcgK,cAAcvI,UAC7BsI,EAAqB,KACzB,IAAIE,EAAgB,IACjBvK,EAAEM,cAAckK,gBAAgBzI,UAC/BwI,EAAgB,KAEpB,IAAIE,EAAW,CACX9J,MAAOX,EAAEM,cAAcK,MAAMR,MAC7B2E,SAAU9E,EAAEM,cAAcwE,SAAS3E,MACnCuK,QAASxM,KAAKC,MAAMwM,cACpB5F,SAAWmF,EACXU,aAAcL,EACdM,kBAAmBR,EACnBS,UAAW9K,EAAEM,cAAcwK,UAAU3K,MAErC4C,UAAW7E,KAAKuB,MAAMsD,UAAUkH,SAEpC/L,KAAKC,MAAMqL,gBAAgBiB,K,+BAK3B,IADA,IAAIT,EAAa,GACT7G,EAAE,EAAEA,EAAEjF,KAAKuB,MAAMsD,UAAUC,OAAOG,IAAI,CAE1C,IADA,IAAI0G,EAAW,GACP/G,EAAE,EAAEA,EAAE5E,KAAKuB,MAAMsD,UAAUI,GAAGC,QAAQJ,OAAOF,IACjD+G,EAASlG,KACL,kBAACoH,EAAA,EAAD,CAAYnM,UAAU,OAAOgF,IAAKd,EAAE,GAChC,kBAACkI,EAAA,EAAD,CACIxJ,KAAK,UACLrB,MAAOjC,KAAKuB,MAAMsD,UAAUI,GAAGC,QAAQN,GACvChB,SAAU5D,KAAKuL,eACfwB,YAAWnI,EAAGoI,YAAW/H,EACzB7B,UAAQ,IACZ,kBAACyJ,EAAA,EAAWI,OAAZ,KACI,kBAACrK,EAAA,EAAD,CAAQxC,QAAQ,SAAS2M,YAAWnI,EAAGoI,YAAW/H,EAAGpC,QAAS7C,KAAKmL,eAC/D,8BAAM,uBAAGzK,UAAU,sBAOvCoL,EAAWrG,KACP,kBAACU,EAAA,EAAD,CAAWT,IAAKT,GACZ,kBAAC/B,EAAA,EAAKkD,MAAN,kCACA,kBAAClD,EAAA,EAAKC,QAAN,CACIE,KAAK,OACL2J,YAAW/H,EACXxD,YAAY,kEACZQ,MAASjC,KAAKuB,MAAMsD,UAAUI,GAAGxC,MACjCmB,SAAU5D,KAAKwL,sBACfpI,UAAQ,IACZ,kBAACF,EAAA,EAAKkD,MAAN,2BACA,kBAACxD,EAAA,EAAD,CAAQxC,QAAQ,UAAUyC,QAAS7C,KAAKkL,WAAY8B,YAAW/H,GAC3D,uBAAGvE,UAAU,iBAEhBiL,EACD,6BACA,kBAACzI,EAAA,EAAKM,MAAN,CACAC,QAAM,EACNJ,KAAK,WACLC,KAAK,gBACLrB,MAAOjC,KAAKuB,MAAMsD,UAAUI,GAAGc,cAC/BnC,SAAY5D,KAAKyL,qBACjBuB,YAAW/H,EACXvB,MAAM,2CACN,kBAACd,EAAA,EAAD,CAAQxC,QAAQ,SAASyC,QAAS7C,KAAKqL,gBAAiB2B,YAAW/H,GAAnE,+BAOZ,OACI,oCACA,kBAACrC,EAAA,EAAD,CAAQxC,QAAQ,QAAQM,UAAU,cAAcmC,QAAS7C,KAAKmK,YAC1D,8BACI,uBAAGzJ,UAAU,kBAGrB,kBAACsI,EAAA,EAAD,CAAOF,KAAM9I,KAAKuB,MAAMuH,KAAMG,OAAQjJ,KAAKkK,aACvC,kBAAClB,EAAA,EAAM9H,OAAP,CAAcgI,aAAW,GACrB,kBAACF,EAAA,EAAMG,MAAP,sBAEJ,kBAACjG,EAAA,EAAD,CAAMf,SAAUnC,KAAKsL,iBACjB,kBAACtC,EAAA,EAAM7H,KAAP,KACI,kBAAC+B,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKkD,MAAN,qBACA,kBAAClD,EAAA,EAAKC,QAAN,CAAcG,KAAK,QAAQD,KAAK,OAAO5B,YAAY,kEAAgB2B,UAAQ,KAE/E,kBAACF,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKkD,MAAN,YACA,kBAAClD,EAAA,EAAKC,QAAN,CAAcG,KAAK,WAAWD,KAAK,OAAO5B,YAAY,+CAE1D,kBAACyB,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKkD,MAAN,qBACA,kBAACxD,EAAA,EAAD,CAAQC,QAAS7C,KAAKoL,cAClB,uBAAG1K,UAAU,iBAEhBoL,GAEL,kBAAC5I,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNJ,KAAK,WACLC,KAAK,gBACLrB,MAAM,IACNyB,MAAM,sCACV,kBAACR,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNJ,KAAK,WACLC,KAAK,kBACLrB,MAAM,IACN4B,QAAsC,MAA7B7D,KAAKuB,MAAMqJ,cACpBhH,SAAU5D,KAAKgL,sBACfkC,SAAUlN,KAAKuB,MAAMsJ,kBACrBnH,MAAM,4CAEd,kBAACR,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKkD,MAAN,kCACA,kBAAClD,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNJ,KAAK,QACLC,KAAK,YACLrB,MAAM,IACNyB,MAAM,+CACNG,QAAqC,MAA5B7D,KAAKuB,MAAMuJ,aACpBlH,SAAU5D,KAAKiL,uBACnB,kBAAC/H,EAAA,EAAKM,MAAN,CACIC,QAAM,EACNJ,KAAK,QACLC,KAAK,YACLrB,MAAM,IACNyB,MAAM,qDACNG,QAAqC,MAA5B7D,KAAKuB,MAAMuJ,aACpBlH,SAAU5D,KAAKiL,wBAEvB,kBAAC/H,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKkD,MAAN,kCACA,2BAAO/C,KAAK,OAAOC,KAAK,oBAAoBF,UAAQ,IACpD,2BAAOC,KAAK,OAAOC,KAAK,oBAAoBF,UAAQ,MAG5D,kBAAC4F,EAAA,EAAMI,OAAP,KACI,kBAACxG,EAAA,EAAD,CAAQxC,QAAQ,YAAYyC,QAAS7C,KAAKkK,aAA1C,SACA,kBAACtH,EAAA,EAAD,CAAQxC,QAAQ,UAAUiD,KAAK,UAA/B,kB,GA/RIxC,IAAMC,WCwCnBqM,E,iLAjCP,OACI,kBAAC5G,EAAA,EAAD,CAAW7F,UAAU,kBACjB,kBAAC8F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKqD,GAAI,GACL,yBAAKpJ,UAAU,OACX,wBAAIA,UAAU,UAAd,QACA,kBAAC,EAAD,CAAW4J,aAActK,KAAKC,MAAMqK,gBAExC,kBAAC,EAAD,CACItJ,KAAMhB,KAAKC,MAAM,kBACjBqJ,YAAatJ,KAAKC,MAAMqJ,YACxBf,YAAY,EACZG,aAAc1I,KAAKC,MAAMyI,gBAEjC,kBAACjC,EAAA,EAAD,CAAKqD,GAAI,GACL,yBAAKpJ,UAAU,OACX,wBAAIA,UAAU,UAAd,WACA,kBAAC0M,EAAD,CAAc9B,gBAAiBtL,KAAKC,MAAMqL,gBAAiBmB,cAAezM,KAAKC,MAAMwM,iBAEzF,kBAAC,EAAD,CACIzL,KAAMhB,KAAKC,MAAM,qBACjBgI,gBAAiBjI,KAAKC,MAAL,gBACjBsI,YAAY,EACZnB,gBAAiBpH,KAAKC,MAAMmH,gBAC5B/C,iBAAkBrE,KAAKC,MAAMoE,0B,GA1B/BxD,IAAMC,W,0BCgCjBuM,G,mBAnCX,WAAYpN,GAAO,IAAD,8BACd,4CAAMA,KACDqN,iBAAmB,EAAKA,iBAAiB3L,KAAtB,gBAFV,E,8EAKDG,GACbA,EAAEI,iBACwC,aAAvCJ,EAAEM,cAAcmH,QAAQgE,WACvBvN,KAAKC,MAAMqN,kBAAiB,GAE5BtN,KAAKC,MAAMqN,kBAAiB,K,+BAKhC,IAAIE,EAAkBC,EAStB,MAP2B,aAAxBzN,KAAKC,MAAMyN,UACVF,EAAmB,UACnBC,EAAmB,UAEnBD,EAAmB,QACnBC,EAAmB,WAGnB,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAmBvK,KAAK,QAAQC,KAAK,WACjC,kBAACuK,EAAA,EAAD,CAAcnN,UAAU,SAASN,QAASoN,EAAkBM,kBAAgB,WAAWjL,QAAS7C,KAAKsN,kBAArG,oCACA,kBAACO,EAAA,EAAD,CAAcnN,UAAU,SAASN,QAASqN,EAAkBK,kBAAgB,UAAUjL,QAAS7C,KAAKsN,kBAApG,oC,GA7BKzM,IAAMC,YC8nBhBiN,E,YAxnBX,WAAY9N,GAAO,IAAD,8BACd,4CAAMA,KACDsB,MAAQ,CACTmM,SAAU,WACVjB,cAAe,KACf1M,KAAM,CACFiO,MAAO,KACP1K,KAAM,KACN1C,SAAU,MAEdqN,aAAa,CACTlL,WAAW,EACXT,KAAM,CACF,MAAQ,KACR,SAAW,OAGnBkH,SAAU,CACNzG,WAAW,EACXuF,MAAO,IAEX4F,YAAa,CACTnL,WAAW,EACXuF,MAAO,IAEX6F,UAAW,CACPpL,WAAW,EACXuF,MAAO,KAIf,EAAK8F,cAAgB,EAAKA,cAAczM,KAAnB,gBACrB,EAAK0M,YAAc,EAAKA,YAAY1M,KAAjB,gBACnB,EAAK2M,YAAc,EAAKA,YAAY3M,KAAjB,gBACnB,EAAK4M,eAAiB,EAAKA,eAAe5M,KAApB,gBACtB,EAAK6M,OAAS,EAAKA,OAAO7M,KAAZ,gBACd,EAAK8M,eAAiB,EAAKA,eAAe9M,KAApB,gBACtB,EAAK+M,WAAa,EAAKA,WAAW/M,KAAhB,gBAClB,EAAKgN,cAAgB,EAAKA,cAAchN,KAAnB,gBACrB,EAAKiN,cAAgB,EAAKA,cAAcjN,KAAnB,gBACrB,EAAKkN,WAAa,EAAKA,WAAWlN,KAAhB,gBAClB,EAAKmN,cAAgB,EAAKA,cAAcnN,KAAnB,gBACrB,EAAKoN,WAAa,EAAKA,WAAWpN,KAAhB,gBAClB,EAAKqN,gBAAkB,EAAKA,gBAAgBrN,KAArB,gBACvB,EAAKsN,iBAAmB,EAAKA,iBAAiBtN,KAAtB,gBACxB,EAAKuN,aAAe,EAAKA,aAAavN,KAAlB,gBACpB,EAAKwN,cAAgB,EAAKA,cAAcxN,KAAnB,gBACrB,EAAKyN,eAAiB,EAAKA,eAAezN,KAApB,gBACtB,EAAK0N,oBAAsB,EAAKA,oBAAoB1N,KAAzB,gBAC3B,EAAK2N,gBAAkB,EAAKA,gBAAgB3N,KAArB,gBAjDT,E,iFAqDd3B,KAAKqO,gB,oCAGKkB,EAAKC,EAAaC,EAAcC,GAC1C,IAAIC,EACgB,OAAjBF,IACCE,EAAW3P,KAAKuB,MAChBvB,KAAK+B,SAAS0N,IAGlBG,MAAML,EAAIC,GACLK,MAAK,SAACC,GACH,OAAOA,EAAIC,UACZF,MAAK,SAACE,GACL,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACP,WAAfH,EAAKI,OACJF,EAAQF,EAAK/O,MAEbkP,EAAO,IAAIE,MAAML,EAAKM,gBAG/BR,MAAK,SAAC7O,GAAQ0O,EAAS1O,MACzBsP,MAAM,SAASC,GACZC,MAAMD,EAAIF,SACU,OAAjBZ,GACCzP,KAAK+B,SAAS4N,IAEpBhO,KAAK3B,S,oCAOXA,KAAKoO,cAHK,sBAGa,KAAK,KACxB,SAASpN,GACLhB,KAAK+B,SAAS,CACVhC,KAAMiB,IAGVhB,KAAKsO,aAAY,IAEnB3M,KAAK3B,S,kCAGHuI,GACR,IAAIgH,EAEAA,EADDhH,EACO,uBAAuBvI,KAAKuB,MAAMxB,KAAKwC,IAAI,4BAE3C,uBAAuBvC,KAAKuB,MAAMxB,KAAKwC,IAAI,4BAIrD,IAAIkO,EAAYC,OAAOC,OAAO,GAAI3Q,KAAKuB,MAAMiI,SAAU,CAACzG,WAAU,IAClE/C,KAAKoO,cAAcmB,EAAI,KAAK,CAAC/F,SAASiH,GAClC,SAASzP,GACLhB,KAAK+B,SAAS,CACVyH,SAAS,CACLzG,WAAW,EACXuF,MAAOtH,KAIZA,EAAK8D,OAAS,GACb9E,KAAKyO,eAAezN,EAAK,GAAGuB,MAElCZ,KAAK3B,S,qCAGAuI,GACRA,EACCvI,KAAK+B,SAAS,CACV2L,SAAU,aAGd1N,KAAK+B,SAAS,CACV2L,SAAU,YAGlB1N,KAAKsO,YAAY/F,K,6BAGdqI,EAAYpP,GACf,IAOI+N,EAAM,kBAENA,GADa,QAAd/N,EACQ,QAEA,WAGX+N,GAAOqB,EAEJC,MAAMD,GACLrB,GAAO,YAEPA,GAAO,WAGXvP,KAAKoO,cAAcmB,EAAK,KAtBL,CACftB,aAAa,CACTlL,WAAW,EACXT,KAAM,KAoBV,SAAStB,GACLhB,KAAK+B,SAAS,CACVkM,aAAa,CACTlL,WAAW,EACXT,KAAMtB,MAGhBW,KAAK3B,S,qCAIAuC,GACXvC,KAAK+B,SAAS,CAAC0K,cAAelK,IAE9B,IAOIgN,EAAM,uBAAuBhN,EAAI,WAGrCvC,KAAKoO,cAAcmB,EAAI,KAVJ,CACfrB,YAAY,CACRnL,WAAW,EACXuF,MAAO,KAQX,SAAStH,GACFA,EAAK8D,OAAQ,GACZ9D,EAAOhB,KAAKiP,iBAAiBjO,GAC7BA,EAAOhB,KAAKsP,gBAAgBtO,GAC5BhB,KAAK+B,SAAS,CACVmM,YAAY,CACRnL,WAAW,EACXuF,MAAOtH,MAIfhB,KAAK+B,SAAS,CACVmM,YAAY,CACRnL,WAAW,EACXuF,MAAO,OAKrB3G,KAAK3B,S,iCAIJuE,GAEP,IAGIgL,EAAM,0BAHMvP,KAAKuB,MAAM2M,YAAY5F,MAAM/D,GAAKhC,IAOlDvC,KAAKoO,cAAcmB,EAAI,KAAK,KACxB,SAASvO,GACLA,EAAOhB,KAAKkP,aAAalO,GACzBhB,KAAKuB,MAAM2M,YAAY5F,MAAM/D,GAAOvD,EACpC,IAAIqH,EAAerI,KAAKsP,gBAAgBtP,KAAKuB,MAAM2M,YAAY5F,OAC/DtI,KAAK+B,SAAS,CACVmM,YAAY,CACRnL,WAAW,EACXuF,MAAOD,MAIjB1G,KAAK3B,S,oCASDkF,GACV,IAAIX,EAAMW,EAAQX,IACduM,EAAa,CACb5I,UAAWhD,EAAQlE,MAEnBwO,EAAc,CACduB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUL,IAGzB9Q,KAAKoO,cAAc,wBAAwBoB,EAAY,KACnD,SAASxO,GACLhB,KAAK0O,WAAWnK,IAClB5C,KAAK3B,S,oCA+BDoR,GACV,IAAI5B,EAAc,CACduB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUC,IAGzBpR,KAAKoO,cAAc,yBAAyBoB,EAAY,KACpD,SAASxO,GACLhB,KAAKyO,eAAezO,KAAKuB,MAAMkL,gBACjC9K,KAAK3B,S,iCAGJuK,GACPA,EAAK8G,OAASrR,KAAKuB,MAAMxB,KAAKwC,IAC9BgI,EAAK7H,gBAAkB1C,KAAKuB,MAAMxB,KAAKa,SAEvC,IAAI4O,EAAc,CACduB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU5G,IAGzBvK,KAAKoO,cAAc,sBAAsBoB,EAAY,KACjD,SAASxO,GACLhB,KAAKsO,aAAY,IACnB3M,KAAK3B,S,oCAGDsR,GAKVtR,KAAKoO,cAAc,0BAA0BkD,EAJ3B,CACdP,OAAQ,UAGuD,KAC/D,SAAS/P,GACLhB,KAAKyO,eAAezO,KAAKuB,MAAMkL,gBACjC9K,KAAK3B,S,iCAGJuR,GAKPvR,KAAKoO,cAAc,uBAAuBmD,EAJxB,CACdR,OAAQ,UAGiD,KACzD,SAAS/P,GACLhB,KAAKsO,aAAY,IACnB3M,KAAK3B,S,sCAGCuR,GACZ,IAAIhC,EAAM,uBAAuBgC,EAAO,QACpC/B,EAAc,CACduB,OAAQ,MACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACK,QAAQxR,KAAKuB,MAAMxB,KAAKwC,OAGlDvC,KAAKoO,cAAcmB,EAAIC,EAAY,KAC/B,SAASxO,GACLhB,KAAKuO,gBAAe,IACtB5M,KAAK3B,S,uCAMEkO,GAEbA,EAAYuD,MAAK,SAASC,EAAGC,GACzB,IAAIC,EAAaC,OAAOH,EAAG/K,YACvBmL,EAAaD,OAAOF,EAAGhL,YAE3B,OAAGiL,GAAcE,GACL,EACHF,EAAaE,EACX,OADL,KAMV,IAAIC,EAAmB,GACnBC,EAAO,EACPC,EAAO,EACPC,EAAkBhE,EAAY,GAAGvH,WACrC,IAAIsL,EAAK,EAAEA,EAAK/D,EAAYpJ,OAAOmN,IAAO,CACtC,GAAGC,GAAmBhE,EAAY+D,GAAMtL,WAAW,CAC/C,IAAIyK,EAAUlD,EAAYnC,MAAMiG,EAAKC,GACjCE,EAAgBnS,KAAKkP,aAAakC,GACtCW,EAAiBtM,KAAK0M,GACtBH,EAAOC,EAGXC,EAAkBhE,EAAY+D,GAAMtL,WAExC,IAAIyK,EAAUlD,EAAYnC,MAAMiG,EAAKC,GACjCE,EAAgBnS,KAAKkP,aAAakC,GAGtC,OAFAW,EAAiBtM,KAAK0M,GAEfJ,I,mCAMEX,GACTpR,KAAKqP,oBAAoB+B,GACzB,IAAIe,EAAgB,CAChB5P,IAAK6O,EAAQ,GAAGzK,WAChB6F,QAAS4E,EAAQ,GAAG5E,QACpB/J,MAAO2O,EAAQ,GAAGgB,cAClBxL,SAAUwK,EAAQ,GAAGxK,SACrB4K,QAASJ,EAAQ,GAAGI,QACpB1O,cAAesO,EAAQ,GAAGtO,cAC1B+D,SAAUuK,EAAQ,GAAGvK,SACrB8F,kBAAmByE,EAAQ,GAAGzE,kBAC9BD,aAAc0E,EAAQ,GAAG1E,aACzBE,UAAWwE,EAAQ,GAAGxE,UACtByF,YAAajB,EAAQ,GAAGiB,YACxBxN,UAAU,IAGd,GAA2B,aAAxB7E,KAAKuB,MAAMmM,SAAwB,CAClC,IAAI/I,EAAQ3E,KAAKoP,eAAegC,GAChCe,EAAcxN,MAAQA,EAK1ByM,EAAQK,MAAK,SAASC,EAAGC,GACrB,IAAIW,EAAcT,OAAOH,EAAGa,YACxBC,EAAcX,OAAOF,EAAGY,YAE5B,OAAGD,EAAcE,GACL,EACHF,EAAcE,EACZ,EAESX,OAAOH,EAAGxJ,WACV2J,OAAOF,EAAGzJ,YAGd,EAED,KAMnB,IAAI8J,EAAO,EACPC,EAAO,EACPQ,EAAmBrB,EAAQ,GAAGsB,YAClC,IAAIT,EAAK,EAAEA,EAAKb,EAAQtM,OAAOmN,IAAO,CAClC,GAAGQ,GAAoBrB,EAAQa,GAAMS,YAAY,CAC7C,IAAIC,EAAWvB,EAAQrF,MAAMiG,EAAMC,GAC/BW,EAAiB5S,KAAKmP,cAAcwD,GACxCR,EAActN,UAAUY,KAAKmN,GAC7BZ,EAAOC,EAGXQ,EAAmBrB,EAAQa,GAAMS,YAGrC,IAAIC,EAAWvB,EAAQrF,MAAMiG,EAAMC,GAC/BW,EAAiB5S,KAAKmP,cAAcwD,GAGxC,OAFAR,EAActN,UAAUY,KAAKmN,GAEtBT,I,oCAMGQ,GAUV,IATA,IAAIC,EAAiB,CACjBrQ,IAAKoQ,EAAS,GAAGD,YACjB/M,eAAgBgN,EAAS,GAAGhN,eAC5BoF,UAAW4H,EAAS,GAAG5H,UACvBhF,cAAe4M,EAAS,GAAG5M,cAC3Bb,QAAS,IAILN,EAAE,EAAEA,EAAE+N,EAAS7N,OAAOF,IAAI,CAC9B,IAAIiO,EAAS,CACTzN,YAAauN,EAAS/N,GAAGQ,YACzB8C,UAAWyK,EAAS/N,GAAGsD,UACvB/C,eAAgBwN,EAAS/N,GAAGO,eAAe2N,MAAM,KACjDpL,qBAAsBiL,EAAS/N,GAAG8C,qBAAqBoL,MAAM,KAC7DxL,MAAOqL,EAAS/N,GAAGmO,cAGvB,GAA2B,aAAxB/S,KAAKuB,MAAMmM,SAAwB,CAClCmF,EAAOlO,OAAQ,EACf,IAAI,IAAIM,EAAE,EAAEA,EAAE4N,EAAO1N,eAAeL,OAAOG,IACpC4N,EAAO1N,eAAeF,KAAOjF,KAAKuB,MAAMxB,KAAKwC,MAC5CsQ,EAAOlO,OAAQ,GAK3BiO,EAAe1N,QAAQO,KAAKoN,GAehC,OAXAD,EAAe1N,QAAQuM,MAAK,SAASuB,EAAGC,GAIpC,OAHgBpB,OAAOmB,EAAG9K,WACV2J,OAAOoB,EAAG/K,YAGd,EAED,KAIR0K,I,0CAMSxB,GAChB,IAAI8B,EAAU,IAAIC,KACdC,EAAe,IAAID,KAAK/B,EAAQ,GAAGvK,UAEnCuK,EAAQ,GAAG/J,eADZ+L,GAAgBF,I,qCASR9B,GACX,IAAI,IAAIxM,EAAE,EAAEA,EAAEwM,EAAQtM,OAAOF,IAEzB,IADA,IAAIyO,EAAejC,EAAQxM,GAAGO,eAAe2N,MAAM,KAC3C7N,EAAE,EAAEA,EAAEoO,EAAavO,OAAOG,IAC9B,GAAGoO,EAAapO,KAAOjF,KAAKuB,MAAMxB,KAAKwC,IACnC,OAAO,EAInB,OAAO,I,sCAMK2L,GAyCZ,MAvC2B,aAAxBlO,KAAKuB,MAAMmM,SACVQ,EAAYuD,MAAK,SAASC,EAAGC,GACzB,IAAI2B,EAAyB5B,EAAG/M,OAAS+M,EAAGrK,eACxCkM,EAAyB5B,EAAGhN,OAASgN,EAAGtK,eAE5C,OAAIiM,GAA0BC,GAClB,EACHD,IAA2BC,GAGf1B,OAAOH,EAAGnP,KACVsP,OAAOF,EAAGpP,KAHpB,GAOK,KAOpB2L,EAAYuD,MAAK,SAASC,EAAGC,GACzB,OAAID,EAAGrK,gBAAkBsK,EAAGtK,gBAChB,EACHqK,EAAGrK,iBAAmBsK,EAAGtK,gBAGbwK,OAAOH,EAAGnP,KACVsP,OAAOF,EAAGpP,KAHpB,GAOK,KAMjB2L,I,+BAIP,IAAIsF,EAAQ,KAwBZ,OAtBIA,EADsB,YAAvBxT,KAAKuB,MAAMmM,SACF,kBAAC,EAAD,CACI+F,iBAAgBzT,KAAKuB,MAAMiI,SAC3BF,YAAatJ,KAAKyO,eAClBiF,oBAAmB1T,KAAKuB,MAAM2M,YAC9BjG,gBAAiBjI,KAAK2O,cACtBgF,eAAgB3T,KAAK4T,aACrBvP,iBAAkBrE,KAAK0O,aAG3B,kBAAC,EAAD,CACI+E,iBAAgBzT,KAAKuB,MAAMiI,SAC3BF,YAAatJ,KAAKyO,eAClBiF,oBAAmB1T,KAAKuB,MAAM2M,YAC9B5C,gBAAiBtL,KAAK4O,cACtBtE,aAActK,KAAK6O,WACnBzH,gBAAiBpH,KAAK8O,cACtBpG,aAAc1I,KAAK+O,WACnB1K,iBAAkBrE,KAAK0O,WACvBjC,cAAezM,KAAKuB,MAAMkL,gBAKtC,kBAAClG,EAAA,EAAD,CAAW7F,UAAU,OACjB,kBAAC,EAAD,CAAYX,KAAMC,KAAKuB,MAAMxB,KAAMO,KAAK,mBAAxC,WACA,kBAACkG,EAAA,EAAD,CAAK9F,UAAU,OACX,kBAAC+F,EAAA,EAAD,CAAKC,GAAI,GAAImN,GAAI,EAAGnT,UAAU,OAC1B,kBAAC,EAAD,CAAUM,KAAMhB,KAAKmO,aAEzB,kBAAC1H,EAAA,EAAD,CAAKC,GAAI,GAAImN,GAAI,EAAGnT,UAAU,OAC1B,kBAAC,EAAD,CAAWyB,SAAUnC,KAAKwO,OAAQxN,KAAMhB,KAAKuB,MAAM0M,aAAc5L,QAASrC,KAAKgP,oBAGvF,kBAAC,EAAD,CAAYtB,SAAU1N,KAAKuB,MAAMmM,SAAUJ,iBAAkBtN,KAAKuO,iBAElE,kBAAC/H,EAAA,EAAD,CAAK9F,UAAU,OACV8S,Q,GAlnBH3S,IAAMC,WCGJgT,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5E,MAAK,SAAA6E,GACJA,EAAaC,gBAEdrE,OAAM,SAAAsE,GACLC,QAAQD,MAAMA,EAAMvE,a","file":"static/js/main.4bd53336.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Navbar} from 'react-bootstrap';\r\nimport './style/Navigation.css';\r\n\r\nclass Navigation extends React.Component {\r\n    shouldComponentUpdate(newProps, newState){\r\n        if(newProps.user === this.props.user)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"primary\" variant=\"dark\">\r\n                <Navbar.Brand href={this.props.href}>{this.props.children}</Navbar.Brand>\r\n                <Navbar.Toggle />\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text>\r\n                        Signed in as: \r\n                        <p className=\"nav-user\">{this.props.user.nickname}</p>\r\n                    </Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport {Card, Alert} from 'react-bootstrap';\r\n\r\nclass AlertBox extends React.Component {\r\n    shouldComponentUpdate(newProps, newState){\r\n        if(newProps.data === this.props.data)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <Card.Header>알림</Card.Header>\r\n                <Card.Body>\r\n                <Alert variant='danger'>\r\n                    <Alert.Heading>공지</Alert.Heading>\r\n                    알림 기능은 추후 개발될 예정입니다ㅠ\r\n                </Alert>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default AlertBox;","import React from 'react';\r\nimport {Card, Form, Button, Spinner} from 'react-bootstrap';\r\nimport './style/SearchBox.css';\r\n\r\nclass SearchBox extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            searchType : 'room',\r\n            placeholder : 'room을 입력하세요.'\r\n        }\r\n        this.onSearchTypeChange = this.onSearchTypeChange.bind(this);\r\n        this.onSearchSubmit = this.onSearchSubmit.bind(this);\r\n        this.onAddRoom = this.onAddRoom.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(newProps, newState){\r\n        if(newProps.data === this.props.data && newState === this.state)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    onSearchTypeChange(e){\r\n        this.setState({\r\n            searchType : e.target.value,\r\n            placeholder : e.target.value+'을 입력하세요.'\r\n        });\r\n    }\r\n\r\n    onSearchSubmit(e){\r\n        e.preventDefault();\r\n        this.props.onSubmit(e.currentTarget['search-word'].value,e.currentTarget['search-type'].value);\r\n    }\r\n\r\n    onAddRoom(e){\r\n        e.preventDefault();    \r\n        this.props.addRoom(this.props.data.item.sid);\r\n    }\r\n\r\n    render() {\r\n        let _content = null;\r\n        if(this.props.data.item.title!==null){\r\n            if(this.state.searchType === 'room'){\r\n                _content = <div className=\"search-box-content\">\r\n                                <b>{this.props.data.item.title}</b><br/>\r\n                                <b>방장:</b> {this.props.data.item.master_nickname}<br/>\r\n                                <b>참여인원:</b> {this.props.data.item.part_num}<br/>\r\n                            <Button onClick={this.onAddRoom}>Room 참여</Button>\r\n                        </div>;\r\n            }else{\r\n                _content = <div className=\"search-box-content\">\r\n                                <b>{this.props.data.item.title}</b><br/>\r\n                                <b>개설자:</b> {this.props.data.item.user_nickname}<br/>\r\n                            <Button href=\"#\">Simpoll 참여</Button>\r\n                        </div>;\r\n            }\r\n        }\r\n\r\n        if(this.props.data.isLoading){\r\n            _content = <Spinner animation=\"border\" variant=\"primary\"/>;\r\n        }\r\n\r\n        return (\r\n            <Card>\r\n                <Card.Header>검색</Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={this.onSearchSubmit}>\r\n                        <Form.Control required type=\"text\" placeholder={this.state.placeholder} name=\"search-word\"/>\r\n                        <Form.Group className=\"p-1\">\r\n                            <Form.Check inline label=\"Room\" type='radio' id='radio-1' \r\n                                name=\"search-type\" value=\"room\"\r\n                                onChange={this.onSearchTypeChange}\r\n                                checked={this.state.searchType === 'room'}/>\r\n                            <Form.Check inline label=\"Simpoll\" type='radio' id='radio-2' \r\n                                name=\"search-type\" value=\"simpoll\"\r\n                                onChange={this.onSearchTypeChange}\r\n                                checked={this.state.searchType === 'simpoll'}/>\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Search!\r\n                            </Button>\r\n                        </Form.Group>\r\n                    </Form>\r\n                        {_content}\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default SearchBox;","var BackgroundColorPreset = [\r\n    \"#007bff7f\",\r\n    \"#6c757d7f\",\r\n    \"#28a7457f\",\r\n    \"#dc35457f\",\r\n    \"#ffc1077f\",\r\n    \"#17a2b87f\"\r\n]\r\n\r\nexport default BackgroundColorPreset;","import React from 'react';\r\nimport {Button, Collapse, Card, Container, Row, Col, ButtonGroup, Form, FormGroup} from 'react-bootstrap';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './style/Simpoll.css';\r\nimport BackgroundColorPreset from './json/chart';\r\n\r\nclass SimpollResultAudience extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            page: 1\r\n        };\r\n        this.setOpen = this.setOpen.bind(this);\r\n        this.disableLeftButton = this.disableLeftButton.bind(this);\r\n        this.disableRightButton = this.disableRightButton.bind(this);\r\n        this.onSimpollRefresh = this.onSimpollRefresh.bind(this);\r\n    }\r\n\r\n    setOpen(_open){\r\n        this.setState({\r\n            open: _open\r\n        })\r\n    }\r\n\r\n    disableLeftButton(){\r\n        if(this.state.page === 1)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    disableRightButton(){\r\n        if(this.state.page === 2)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    onSimpollRefresh(e){\r\n        e.preventDefault();\r\n        this.props.onSimpollRefresh(this.props.idx);\r\n    }\r\n\r\n    render() {\r\n        let _arrow;\r\n        let _key = 1;\r\n\r\n        if(this.state.open)\r\n            _arrow =<span className=\"icon-arrow\">\r\n                    <i className=\"fas fa-chevron-up\"></i>\r\n                    </span>; \r\n        else\r\n            _arrow =<span className=\"icon-arrow\">\r\n                    <i className=\"fas fa-chevron-down\"></i>\r\n                    </span>;\r\n\r\n        let _mark = <i className=\"far fa-clock\"></i>;\r\n        if(this.props.data.voted)\r\n            _mark = <i className=\"far fa-check-circle\"></i>;\r\n\r\n        let _content = [];\r\n        switch(this.state.page){\r\n            case 1:\r\n                for(let i=0;i<this.props.data.questions.length;i++){\r\n                    let _count = [];\r\n                    let _label = [];\r\n\r\n                    for(let j=0;j<this.props.data.questions[i].options.length;j++){\r\n                        _count[j] = this.props.data.questions[i].options[j].option_user_id.length;\r\n                        _label[j] = this.props.data.questions[i].options[j].option_name;\r\n                    }\r\n\r\n                    let _data = {\r\n                        datasets:[{\r\n                            backgroundColor: BackgroundColorPreset,\r\n                            data: _count\r\n                        }],\r\n                        labels: _label\r\n                    }\r\n\r\n                    _content.push(\r\n                        <div key={i}>\r\n                            <p key={i}>{this.props.data.questions[i].question_title}</p>\r\n                            <Doughnut \r\n                            data={_data} \r\n                            width={100}\r\n                            height={50}/>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                break;\r\n\r\n            case 2:\r\n                _content.push(<p key={_key++}>내 선택</p>);\r\n                for(let j=0;j<this.props.data.questions.length;j++){\r\n                    let _formGroup = [];\r\n                    if(this.props.data.questions[j].question_type === \"0\"){\r\n                        for(let i=0;i<this.props.data.questions[j].options.length;i++){\r\n                            let _checked = this.props.data.questions[j].options[i].voted;\r\n\r\n                            _formGroup.push(\r\n                                <Form.Check \r\n                                    inline\r\n                                    key={_key++}\r\n                                    label={this.props.data.questions[j].options[i].option_name} \r\n                                    type='radio' \r\n                                    id={'simpoll-'+this.props.data.questions[j].sid+'-radio-'+(i+1)} \r\n                                    name=\"contents_number\" value={(i+1)}\r\n                                    defaultChecked={_checked}\r\n                                    disabled={true}/>\r\n                            )\r\n                        }\r\n                    }else if(this.props.data.questions[j].question_type === \"1\"){\r\n                        for(let i=0;i<this.props.data.questions[j].options.length;i++){\r\n                            let _checked = this.props.data.questions[j].options[i].voted;\r\n                            _formGroup.push(\r\n                                <Form.Check \r\n                                    inline\r\n                                    key={_key++}\r\n                                    label={this.props.data.questions[j].options[i].option_name} \r\n                                    type='checkbox' \r\n                                    id={'simpoll-'+this.props.data.questions[j].sid+'-checkbox-'+(i+1)} \r\n                                    name=\"contents_number\" value={(i+1)}\r\n                                    defaultChecked={_checked}\r\n                                    disabled={true}/>\r\n                            )\r\n                        }\r\n                    }\r\n                    _content.push(\r\n                        <FormGroup key={_key++}>\r\n                            <Form.Label key={_key++}>{this.props.data.questions[j].question_title}</Form.Label>\r\n                            <br/>\r\n                            {_formGroup}\r\n                        </FormGroup>\r\n                    )\r\n                }\r\n\r\n                break;\r\n\r\n        }\r\n\r\n        let isDisableLeftButton = this.disableLeftButton();\r\n        let isDisableRightButton = this.disableRightButton();\r\n        return (\r\n\r\n            <Card>\r\n                <Card.Header className=\"p-1\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xs={1}>\r\n                                <span className=\"icon-checked\">\r\n                                    {_mark}\r\n                                </span>\r\n                            </Col>\r\n                            <Col xs={9} className=\"p-0\">\r\n                                <Row>\r\n                                    <Col xs={12}>\r\n                                        <b>제목</b>: {this.props.data.title} <b>심폴ID</b>: {this.props.data.simpoll_id} <b>URL</b>: {this.props.data.url_name}\r\n                                    </Col>\r\n                                    <Col xs={12}>\r\n                                        <b>마감기한</b>: {this.props.data.deadline}\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            <Col xs={1}>\r\n                                <Button \r\n                                    variant=\"light\" className=\"p-0 float-right\"\r\n                                    onClick={this.onSimpollRefresh}\r\n                                >\r\n                                    <span className=\"icon-refresh\">\r\n                                        <i className=\"fas fa-redo-alt\"></i>\r\n                                    </span>\r\n                                </Button>\r\n                            </Col>\r\n                            <Col xs={1}>\r\n                                <Button \r\n                                    variant=\"light\" className=\"p-0 float-right\"\r\n                                    onClick={() => this.setOpen(!this.state.open)}\r\n                                    aria-controls={\"collapse-simpoll-\"+this.props.idx}\r\n                                    aria-expanded={this.state.open}\r\n                                >\r\n                                    {_arrow}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Collapse in={this.state.open}>\r\n                        <div id={\"collapse-simpoll-\"+this.props.idx}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Button \r\n                                    variant=\"light\" \r\n                                    disabled={isDisableLeftButton} \r\n                                    onClick={function(){this.setState({page: (this.state.page-1)})}.bind(this)}>\r\n                                    <span>\r\n                                        <i className=\"fas fa-chevron-left\"></i>\r\n                                    </span>\r\n                                </Button>\r\n                                <Button \r\n                                    variant=\"light\" \r\n                                    disabled={isDisableRightButton} \r\n                                    onClick={function(){this.setState({page: (this.state.page+1)})}.bind(this)}>\r\n                                    <span>\r\n                                        <i className=\"fas fa-chevron-right\"></i>\r\n                                    </span>\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                            {_content}\r\n                        </div>\r\n                    </Collapse>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default SimpollResultAudience;","import React from 'react';\r\nimport {Button, Collapse, Card, Container, Row, Col, ButtonGroup, Table, Alert} from 'react-bootstrap';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './style/Simpoll.css';\r\nimport BackgroundColorPreset from './json/chart';\r\nimport SimpollResultProgress from './SimpollResultProgress';\r\n\r\nclass SimpollResultSpeaker extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            choice: 1,\r\n            page: 1\r\n        };\r\n        this.setOpen = this.setOpen.bind(this);\r\n        this.disableLeftButton = this.disableLeftButton.bind(this);\r\n        this.disableRightButton = this.disableRightButton.bind(this);\r\n        this.onSimpollDelete = this.onSimpollDelete.bind(this);\r\n        this.onSimpollRefresh = this.onSimpollRefresh.bind(this);\r\n    }\r\n\r\n    setOpen(_open){\r\n        this.setState({\r\n            open: _open\r\n        })\r\n    }\r\n\r\n    disableLeftButton(){\r\n        if(this.state.page == 1)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    disableRightButton(){\r\n        if(this.state.page == 3)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    onSimpollDelete(e){\r\n        e.preventDefault();\r\n        this.props.onSimpollDelete(this.props.data.sid);\r\n    }\r\n\r\n    onSimpollRefresh(e){\r\n        e.preventDefault();\r\n        this.props.onSimpollRefresh(this.props.idx,false,false);\r\n    }\r\n\r\n    render() {\r\n        let _arrow;\r\n        if(this.state.open)\r\n            _arrow =<span className=\"icon-arrow\">\r\n                    <i className=\"fas fa-chevron-up\"></i>\r\n                    </span>; \r\n        else\r\n            _arrow =<span className=\"icon-arrow\">\r\n                    <i className=\"fas fa-chevron-down\"></i>\r\n                    </span>;\r\n\r\n        let _mark = null;\r\n        if(this.props.data.isDeadlinePass)\r\n            _mark = <span className=\"icon-checked\">\r\n                        <i className=\"far fa-clock\"></i>\r\n                    </span>;\r\n\r\n        let _content = [];\r\n        switch(this.state.page){\r\n            case 1:\r\n                for(let i=0;i<this.props.data.questions.length;i++){\r\n                    let _count = [];\r\n                    let _label = [];\r\n\r\n                    for(let j=0;j<this.props.data.questions[i].options.length;j++){\r\n                        _count[j] = this.props.data.questions[i].options[j].count;\r\n                        _label[j] = this.props.data.questions[i].options[j].option_name;\r\n                    }\r\n\r\n                    let _data = {\r\n                        datasets:[{\r\n                            backgroundColor: BackgroundColorPreset,\r\n                            data: _count\r\n                        }],\r\n                        labels: _label\r\n                    }\r\n\r\n                    _content.push(\r\n                        <div key={i}>\r\n                            <p key={i}>{this.props.data.questions[i].question_title}</p>\r\n                            <Doughnut \r\n                            data={_data} \r\n                            width={100}\r\n                            height={50}/>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                break;\r\n\r\n            case 2:\r\n                let _key = 1;\r\n                for(let j=0;j<this.props.data.questions.length;j++){\r\n                    let _choices=[];\r\n                    for(let i=0;i<this.props.data.questions[j].options.length;i++){\r\n                        let str = \"\";\r\n                        for(let k=0;k<this.props.data.questions[j].options[i].option_user_nickname.length;k++){\r\n                            str += this.props.data.questions[j].options[i].option_user_nickname[k];\r\n                            if(k !== this.props.data.questions[j].options[i].option_user_nickname.length-1)\r\n                                str += \", \";\r\n                        }\r\n                        _choices.push(\r\n                            <tr key={_key++}>\r\n                                <td key=\"1\">{this.props.data.questions[j].options[i].option_name}</td>\r\n                                <td key=\"2\">{this.props.data.questions[j].options[i].count} 명</td>\r\n                                <td key=\"3\">{str}</td>\r\n                            </tr>\r\n                        );\r\n                    }\r\n\r\n                    _content.push(<p key={_key++}>{this.props.data.questions[j].question_title}</p>)\r\n                    _content.push(<Table striped bordered hover key={_key++}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Question</th>\r\n                                        <th>Number</th>\r\n                                        <th>Person</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {_choices}\r\n                                </tbody>\r\n                                </Table>);\r\n                }\r\n                break;\r\n            case 3:\r\n                _content = <><br/><br/>\r\n                <Alert variant=\"danger\">\r\n                <Alert.Heading>정말로 Simpoll을 삭제하시겠습니까?</Alert.Heading>\r\n                <p>삭제시 복구가 불가능합니다.</p>\r\n                <hr />\r\n                <div className=\"d-flex justify-content-end\">\r\n                  <Button onClick={this.onSimpollDelete} variant=\"outline-danger\">\r\n                    Delete\r\n                  </Button>\r\n                </div>\r\n                </Alert>\r\n                </>\r\n                break;\r\n        }\r\n\r\n        let isDisableLeftButton = this.disableLeftButton();\r\n        let isDisableRightButton = this.disableRightButton();\r\n        return (\r\n\r\n            <Card>\r\n                <Card.Header className=\"p-1\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xs={1}>\r\n                                {_mark}\r\n                                \r\n                            </Col>\r\n                            <Col xs={9} className=\"p-0\">\r\n                                <Row>\r\n                                    <Col xs={12}>\r\n                                        <b>제목</b>: {this.props.data.title} <b>심폴ID</b>: {this.props.data.sid} <b>URL</b>: {this.props.data.url_name}\r\n                                    </Col>\r\n                                    <Col xs={12}>\r\n                                        <b>마감기한</b>: {this.props.data.deadline}\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            <Col xs={1}>\r\n                                <Button \r\n                                    variant=\"light\" className=\"p-0 float-right\"\r\n                                    onClick={this.onSimpollRefresh}\r\n                                >\r\n                                    <span className=\"icon-refresh\">\r\n                                        <i className=\"fas fa-redo-alt\"></i>\r\n                                    </span>\r\n                                </Button>\r\n                            </Col>\r\n                            <Col xs={1}>\r\n                                <Button \r\n                                    variant=\"light\" className=\"p-0 float-right\"\r\n                                    onClick={() => this.setOpen(!this.state.open)}\r\n                                    aria-controls={\"collapse-simpoll-\"+this.props.idx}\r\n                                    aria-expanded={this.state.open}\r\n                                >\r\n                                    {_arrow}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Collapse in={this.state.open}>\r\n                        <div id={\"collapse-simpoll-\"+this.props.idx}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Button \r\n                                    variant=\"light\" \r\n                                    disabled={isDisableLeftButton} \r\n                                    onClick={function(){this.setState({page: (this.state.page-1)})}.bind(this)}>\r\n                                    <span>\r\n                                        <i className=\"fas fa-chevron-left\"></i>\r\n                                    </span>\r\n                                </Button>\r\n                                <Button \r\n                                    variant=\"light\" \r\n                                    disabled={isDisableRightButton} \r\n                                    onClick={function(){this.setState({page: (this.state.page+1)})}.bind(this)}>\r\n                                    <span>\r\n                                        <i className=\"fas fa-chevron-right\"></i>\r\n                                    </span>\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                            {_content}\r\n                        </div>\r\n                    </Collapse>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default SimpollResultSpeaker;","import React from 'react';\r\nimport {ProgressBar} from 'react-bootstrap';\r\n\r\nclass SimpollResultProgress extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            colors : [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\"]\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if(this.props.data.label === undefined){\r\n            return null;\r\n        }\r\n\r\n        let sum = 0;\r\n        for(let i=0;i<this.props.data.label.length;i++){\r\n            sum += this.props.data.data[i];\r\n        }\r\n        \r\n        let _bars = [];\r\n        for(let i=0;i<this.props.data.label.length;i++){\r\n            _bars.push(\r\n                <ProgressBar animated key={(i+1)}\r\n                    variant={this.state.colors[(i%this.state.colors.length)]} \r\n                    now={(this.props.data.data[i]*100/sum)} \r\n                    label={this.props.data.label[i]} />\r\n                );\r\n        }\r\n\r\n        return (\r\n            <ProgressBar>\r\n                {_bars}        \r\n            </ProgressBar>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default SimpollResultProgress;","import React from 'react';\r\nimport {Button, Collapse, Form, Card, Container, Row, Col, FormGroup} from 'react-bootstrap';\r\nimport './style/Simpoll.css';\r\n\r\nclass SimpollChoice extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            choice: 1\r\n        };\r\n        this.setOpen = this.setOpen.bind(this);\r\n        this.onChoiceChange = this.onChoiceChange.bind(this);\r\n        this.onSimpollSubmit = this.onSimpollSubmit.bind(this);\r\n    }\r\n\r\n    setOpen(_open){\r\n        this.setState({\r\n            open: _open\r\n        })\r\n    }\r\n\r\n    onChoiceChange(e){\r\n        this.setState({\r\n            choice: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    onSimpollSubmit(e){\r\n        e.preventDefault();\r\n        \r\n        let options = [];\r\n        for(let i=0;i<this.props.data.questions.length;i++){\r\n            for(let j=0;j<this.props.data.questions[i].options.length;j++){\r\n                if(e.currentTarget['option-'+this.props.data.questions[i].options[j].option_id].checked === true)\r\n                    options.push(e.currentTarget['option-'+this.props.data.questions[i].options[j].option_id].value);\r\n            }\r\n        }\r\n\r\n        this.props.onSimpollSubmit({\r\n            idx: this.props.idx,\r\n            data: options\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let _content = [];\r\n        let _key = 1;\r\n        for(let j=0;j<this.props.data.questions.length;j++){\r\n            let _formGroup = [];\r\n\r\n            if(this.props.data.questions[j].question_type === \"0\"){\r\n                for(let i=0;i<this.props.data.questions[j].options.length;i++){\r\n                    _formGroup.push(\r\n                        <Form.Check \r\n                            inline\r\n                            key={_key++}\r\n                            label={this.props.data.questions[j].options[i].option_name} \r\n                            type='radio' \r\n                            id={'simpoll-'+this.props.data.questions[j].sid+'-radio-'+(i+1)} \r\n                            name={\"option-\"+this.props.data.questions[j].options[i].option_id}\r\n                            value={this.props.data.questions[j].options[i].option_id}/>\r\n                    )\r\n                }\r\n            }else if(this.props.data.questions[j].question_type === \"1\"){\r\n                for(let i=0;i<this.props.data.questions[j].options.length;i++){\r\n                    _formGroup.push(\r\n                        <Form.Check \r\n                            inline\r\n                            key={_key++}\r\n                            label={this.props.data.questions[j].options[i].option_name} \r\n                            type='checkbox' \r\n                            id={'simpoll-'+this.props.data.questions[j].sid+'-checkbox-'+(i+1)} \r\n                            name={\"option-\"+this.props.data.questions[j].options[i].option_id}\r\n                            value={this.props.data.questions[j].options[i].option_id}/>\r\n                    )\r\n                }\r\n\r\n            }\r\n\r\n            _content.push(\r\n                <FormGroup key={j}>\r\n                    <Form.Label>{this.props.data.questions[j].question_title}</Form.Label>\r\n                    <br/>\r\n                    {_formGroup}\r\n                </FormGroup>\r\n            )\r\n        }\r\n\r\n        let _arrow;\r\n        if(this.state.open)\r\n            _arrow =<span className=\"icon-arrow\">\r\n                    <i className=\"fas fa-chevron-up\"></i>\r\n                    </span>; \r\n        else\r\n            _arrow =<span className=\"icon-arrow\">\r\n                    <i className=\"fas fa-chevron-down\"></i>\r\n                    </span>;\r\n\r\n        return (\r\n            <Card>\r\n                <Card.Header className=\"p-1\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xs={1}></Col>\r\n                            <Col xs={10} className=\"p-0\">\r\n                                <Row>\r\n                                    <Col xs={12}>\r\n                                        <b>제목</b>: {this.props.data.title} <b>심폴ID</b>: {this.props.data.sid} <b>URL</b>: {this.props.data.url_name}\r\n                                    </Col>\r\n                                    <Col xs={12}>\r\n                                        <b>마감기한</b>: {this.props.data.deadline} \r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            <Col xs={1}>\r\n                                <Button \r\n                                    variant=\"light\" className=\"p-0 float-right\"\r\n                                    onClick={() => this.setOpen(!this.state.open)}\r\n                                    aria-controls={\"collapse-simpoll-\"+this.props.idx}\r\n                                    aria-expanded={this.state.open}\r\n                                >\r\n                                    {_arrow}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                \r\n                <Card.Body>\r\n                    <Collapse in={this.state.open}>\r\n                        <div id={\"collapse-simpoll-\"+this.props.idx}>\r\n                            <Form onSubmit={this.onSimpollSubmit}>\r\n                                    {_content}\r\n                                <input type=\"hidden\" name=\"idx\" value={(this.props.idx)}/>\r\n                                <Button className=\"float-right\" variant=\"success\" type=\"submit\">Submit!</Button>\r\n                            </Form>\r\n                        </div>\r\n                    </Collapse>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default SimpollChoice;","import React from 'react';\r\nimport {Spinner} from 'react-bootstrap';\r\nimport SimpollResultAudience from './SimpollResultAudience';\r\nimport SimpollResultSpeaker from './SimpollResultSpeaker';\r\nimport SimpollChoice from './SimpollChoice';\r\n\r\nclass SimpollList extends React.Component {\r\n    render() {\r\n        let _contents = [];\r\n\r\n        if(this.props.data.isLoading){\r\n            _contents = <Spinner animation=\"border\" variant=\"primary\"/>;\r\n        }else{\r\n            let _simpollList = this.props.data.items;\r\n            if(!this.props.isAudience){\r\n                for(let i=0;i<_simpollList.length;i++){\r\n                    _contents.push(\r\n                        <SimpollResultSpeaker \r\n                            data={_simpollList[i]} \r\n                            key={(i+1)} idx={i} \r\n                            onSimpollDelete={this.props.onSimpollDelete}\r\n                            onSimpollRefresh={this.props.onSimpollRefresh}/>\r\n                    ) \r\n                }\r\n            }else{\r\n                for(let i=0;i<_simpollList.length;i++){\r\n                    if(_simpollList[i].voted || _simpollList[i].isDeadlinePass){\r\n                        _contents.push(\r\n                            <SimpollResultAudience \r\n                                data={_simpollList[i]} \r\n                                key={(i+1)} idx={i} \r\n                                onSimpollRefresh={this.props.onSimpollRefresh}/>\r\n                        ) \r\n                    }else{\r\n                        _contents.push(\r\n                            <SimpollChoice data={_simpollList[i]} key={(i+1)} idx={i} onSimpollSubmit={this.props.onSimpollSubmit}/>\r\n                        ) \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {_contents}\r\n            </>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default SimpollList;","import React from 'react';\r\nimport {Button, Modal} from 'react-bootstrap';\r\n\r\nclass Room extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showModal: false\r\n        }\r\n\r\n        this.onRoomDelete = this.onRoomDelete.bind(this);\r\n        this.updateModal = this.updateModal.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.openModal = this.openModal.bind(this);\r\n    }\r\n\r\n    onRoomDelete(e){\r\n        e.preventDefault();\r\n        this.closeModal();\r\n        this.props.onRoomDelete(this.props.data.sid);\r\n    }\r\n\r\n    updateModal(show){\r\n        this.setState({showModal:show});\r\n    }\r\n\r\n    closeModal(){\r\n        this.updateModal(false);\r\n    }\r\n    \r\n    openModal(){\r\n        this.updateModal(true);\r\n    }\r\n\r\n    render() {\r\n        let _deleteBtn = null;\r\n        if(!this.props.isAudience){\r\n            _deleteBtn = <>\r\n                <Button variant=\"light\" className=\"float-right p-0\" onClick={this.openModal}>\r\n                    <span><i className=\"fas fa-minus\"></i></span>\r\n                </Button>\r\n                <Modal show={this.state.showModal} onHide={this.closeModal}>\r\n                    <Modal.Header closeButton>\r\n                    <Modal.Title>정말로 삭제하시겠습니까?</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>한번 삭제하면 되돌릴 수 없습니다.</Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={this.closeModal}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"danger\" onClick={this.onRoomDelete}>\r\n                        Delete\r\n                    </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </>\r\n        }\r\n\r\n        return ( \r\n            <>\r\n                {_deleteBtn}\r\n                <h5>{this.props.data.title}</h5>\r\n                <h6>방장: {this.props.data.master_nickname}</h6>\r\n                <h6>참여인원: {this.props.data.part_num}명</h6>\r\n                <h6>방 ID: {this.props.data.sid} URL: {this.props.data.url_name}</h6>\r\n            </>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Room;","import React from 'react';\r\nimport {Spinner, Nav} from 'react-bootstrap';\r\nimport Room from './Room';\r\n\r\nclass RoomList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.onRoomClick = this.onRoomClick.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(newProps, newState){\r\n        if(newProps.data === this.props.data)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    onRoomClick(e){\r\n        e.preventDefault();\r\n        this.props.onRoomClick(e.currentTarget.dataset.sid,this.props.isAudience);\r\n    }\r\n\r\n    render() {\r\n        let _contents = [];\r\n        if(this.props.data.isLoading){\r\n            _contents = <Spinner animation=\"border\" variant=\"primary\"/>;\r\n        }else{\r\n            let roomList = this.props.data.items;\r\n            for(let i=0;i<roomList.length;i++){\r\n                _contents.push(\r\n                    <Nav.Link \r\n                        key={(i+1)} href={\"#room-link\"+(i+1)}\r\n                        onClick={this.onRoomClick}\r\n                        data-sid={this.props.data.items[i].sid}>\r\n                            <Room \r\n                                data={this.props.data.items[i]} \r\n                                key={(i+1)} \r\n                                isAudience={this.props.isAudience}\r\n                                onRoomDelete={this.props.onRoomDelete}/>\r\n                    </Nav.Link>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Nav className=\"flex-column\" variant=\"pills\" defaultActiveKey=\"#room-link1\">\r\n                {_contents}\r\n            </Nav>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default RoomList;","import React from 'react';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport SimpollList from './SimpollList';\r\nimport RoomList from './RoomList';\r\nimport './style/Main.css';\r\n\r\nclass MainAudience extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container className=\"main-container\">\r\n                <Row>\r\n                    <Col sm={4}>\r\n                        <h3>Room</h3>\r\n                        <RoomList\r\n                            data={this.props['room-list-data']}\r\n                            onRoomClick={this.props.onRoomClick}\r\n                            isAudience={true}/>\r\n                    </Col>\r\n                    <Col sm={8}>\r\n                        <h3>Simpoll</h3>\r\n                        <SimpollList\r\n                            data={this.props['simpoll-list-data']}\r\n                            onSimpollSubmit={this.props['onSimpollSubmit']}\r\n                            isAudience={true}\r\n                            onSimpollRefresh={this.props.onSimpollRefresh}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainAudience;\r\n","import React from 'react';\r\nimport {Modal, Form, Button} from 'react-bootstrap';\r\n\r\nclass RoomModal extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            authType: \"0\",\r\n            nameType: \"0\"\r\n        }\r\n\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleShow = this.handleShow.bind(this);\r\n        this.onChangeVoteCreateAuth = this.onChangeVoteCreateAuth.bind(this);\r\n        this.onChangeUserNameType = this.onChangeUserNameType.bind(this);\r\n        this.onRoomCreate = this.onRoomCreate.bind(this);\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({\r\n            show: false,\r\n            authType: \"0\",\r\n            nameType: \"0\"\r\n        });\r\n    }\r\n\r\n    handleShow() {\r\n        this.setState({show:true});\r\n    }\r\n\r\n    onChangeVoteCreateAuth(e){\r\n        this.setState({authType: e.currentTarget.value});\r\n    }\r\n\r\n    onChangeUserNameType(e){\r\n        this.setState({nameType: e.currentTarget.value});\r\n    }\r\n\r\n    onRoomCreate(e){\r\n        e.preventDefault();\r\n        this.handleClose();\r\n        let _title = e.currentTarget.title.value;\r\n        let _urlName = e.currentTarget.url_name.value;\r\n        let _voteCreateAuth = e.currentTarget.vote_create_auth.value;\r\n        let _userNameType = e.currentTarget.user_name_type.value;\r\n        let room = {\r\n            title:_title,\r\n            url_name: _urlName,\r\n            poll_create_auth: _voteCreateAuth,\r\n            user_name_type: _userNameType\r\n        }\r\n        this.props.onRoomCreate(room);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <Button variant=\"light\" className=\"float-right\" onClick={this.handleShow}>\r\n                <span>\r\n                    <i className=\"fas fa-plus\"></i>\r\n                </span>\r\n            </Button>\r\n            <Modal show={this.state.show} onHide={this.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Make Room</Modal.Title>\r\n                </Modal.Header>\r\n                <Form onSubmit={this.onRoomCreate}>\r\n                    <Modal.Body>\r\n                        <Form.Group>\r\n                            <Form.Label>Room Name</Form.Label>\r\n                            <Form.Control name=\"title\" type=\"text\" placeholder=\"방 이름을 입력하세요.\" required/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>URL</Form.Label>\r\n                            <Form.Control name=\"url_name\" type=\"text\" placeholder=\"URL을 입력하세요.\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Simpoll 생성 권한</Form.Label>\r\n                            <Form.Check \r\n                                type=\"radio\" \r\n                                name=\"vote_create_auth\" \r\n                                value='0' \r\n                                label=\"방장만\"\r\n                                checked={this.state.authType === \"0\"}\r\n                                onChange={this.onChangeVoteCreateAuth}/>\r\n                            <Form.Check \r\n                                inline\r\n                                type=\"radio\" \r\n                                name=\"vote_create_auth\" \r\n                                value='1' \r\n                                label=\"방 참여자 모두\"\r\n                                checked={this.state.authType === \"1\"}\r\n                                onChange={this.onChangeVoteCreateAuth}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>참여자 실명/닉네임 여부</Form.Label>\r\n                            <Form.Check \r\n                                type=\"radio\" \r\n                                name=\"user_name_type\" \r\n                                value='0' \r\n                                label=\"실명\"\r\n                                checked={this.state.nameType === \"0\"}\r\n                                onChange={this.onChangeUserNameType}/>\r\n                            <Form.Check \r\n                                inline\r\n                                type=\"radio\" \r\n                                name=\"user_name_type\" \r\n                                value='1'\r\n                                label=\"닉네임\" \r\n                                checked={this.state.nameType === \"1\"}\r\n                                onChange={this.onChangeUserNameType}/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>Close</Button>\r\n                        <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RoomModal;\r\n","import React from 'react';\r\nimport {Modal, Form, Button, FormControl,InputGroup,FormGroup} from 'react-bootstrap';\r\n\r\nclass SimpolllModal extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            anonymousType: '0',\r\n            anonymousReadOnly: false,\r\n            partAuthType: '0',\r\n            questions:[\r\n                {\r\n                    title:\"\",\r\n                    choice_no: 2,\r\n                    question_type: \"0\",\r\n                    options: [\"\",\"\"]\r\n                }\r\n            ]\r\n        }\r\n\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleShow = this.handleShow.bind(this);\r\n        this.onChangeAnonymousType = this.onChangeAnonymousType.bind(this);\r\n        this.onChangePartAuthType = this.onChangePartAuthType.bind(this);\r\n        this.addOptions = this.addOptions.bind(this);\r\n        this.deleteOptions = this.deleteOptions.bind(this);\r\n        this.addQuestions = this.addQuestions.bind(this);\r\n        this.deleteQuestions = this.deleteQuestions.bind(this);\r\n        this.onSimpollCreate = this.onSimpollCreate.bind(this);\r\n        this.onOptionChange = this.onOptionChange.bind(this);\r\n        this.onQuestionTitleChange = this.onQuestionTitleChange.bind(this);\r\n        this.onQuestionTypeChange = this.onQuestionTypeChange.bind(this);\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({\r\n            show: false,\r\n            anonymousType: '0',\r\n            anonymousReadOnly: false,\r\n            partAuthType: '0',\r\n            options: [\"\",\"\"]\r\n        });\r\n    }\r\n\r\n    handleShow() {\r\n        this.setState({show:true});\r\n    }\r\n\r\n    onChangeAnonymousType(e){\r\n        if(this.state.anonymousType === '0')\r\n            this.setState({anonymousType: '1'});\r\n        else\r\n            this.setState({anonymousType: '0'});\r\n    }\r\n\r\n    onChangePartAuthType(e){\r\n        if(e.currentTarget.value === '1')\r\n            this.setState({\r\n                partAuthType: e.currentTarget.value,\r\n                anonymousType: '1',\r\n                anonymousReadOnly: true\r\n            });\r\n        else\r\n            this.setState({\r\n                partAuthType: e.currentTarget.value,\r\n                anonymousReadOnly: false\r\n            });\r\n    }\r\n\r\n    addOptions(e){\r\n        e.preventDefault();\r\n        let qidx = e.currentTarget.dataset.qidx;\r\n        let _options = this.state.questions[qidx].options;\r\n        _options[_options.length] = \"\";\r\n        this.state.questions[qidx].choice_no++;\r\n\r\n        this.setState({\r\n            questions: this.state.questions\r\n        });\r\n    }\r\n\r\n    deleteOptions(e){\r\n        e.preventDefault();\r\n        let qidx = e.currentTarget.dataset.qidx;\r\n        let oidx = e.currentTarget.dataset.oidx;\r\n        this.state.questions[qidx].options.splice(oidx,1);\r\n        this.state.questions[qidx].choice_no--;\r\n        this.setState({\r\n            questions: this.state.questions\r\n        });\r\n    }\r\n\r\n    addQuestions(e){\r\n        e.preventDefault();\r\n        let _questions = this.state.questions.slice();\r\n        _questions[_questions.length] = {\r\n            title:\"\",\r\n            choice_no: 2,\r\n            question_type: \"0\",\r\n            options: [\"\",\"\"]\r\n        };\r\n\r\n        this.setState({questions: _questions});\r\n    }\r\n\r\n    deleteQuestions(e){\r\n        e.preventDefault();\r\n        this.state.questions.splice(e.currentTarget.dataset.qidx,1);\r\n        this.setState({questions: this.state.questions});\r\n    }\r\n\r\n    onOptionChange(e){\r\n        let qidx = e.currentTarget.dataset.qidx;\r\n        let oidx = e.currentTarget.dataset.oidx;\r\n        this.state.questions[qidx].options[oidx] = e.currentTarget.value;\r\n        this.setState({questions: this.state.questions});\r\n    }\r\n\r\n    onQuestionTitleChange(e){\r\n        let idx = e.currentTarget.dataset.qidx;\r\n        let title = e.currentTarget.value;\r\n        this.state.questions[idx].title = title;\r\n\r\n        this.setState({questions: this.state.questions});\r\n    }\r\n\r\n    onQuestionTypeChange(e){\r\n        let idx = e.currentTarget.dataset.qidx;\r\n        if(e.currentTarget.checked){\r\n            this.state.questions[idx].question_type = \"1\";\r\n        }else{\r\n            this.state.questions[idx].question_type = \"0\";\r\n        }\r\n\r\n        this.setState({questions: this.state.questions});\r\n    }\r\n\r\n    onSimpollCreate(e){\r\n        debugger;\r\n        e.preventDefault();\r\n        this.handleClose();\r\n\r\n        let _deadline = e.currentTarget.simpolll_end_date.value+\" \"+e.currentTarget.simpolll_end_time.value;\r\n        let _is_comment_enable = '0';\r\n        if(e.currentTarget.comment_check.checked)\r\n            _is_comment_enable = '1';\r\n        let _is_anonymous = '0';\r\n        if(e.currentTarget.anonymous_check.checked)\r\n            _is_anonymous = '1';\r\n\r\n        let simpolll = {\r\n            title: e.currentTarget.title.value,\r\n            url_name: e.currentTarget.url_name.value,\r\n            room_id: this.props.currentRoomId,\r\n            deadline : _deadline,\r\n            is_anonymous: _is_anonymous,\r\n            is_comment_enable: _is_comment_enable,\r\n            part_auth: e.currentTarget.part_auth.value,\r\n\r\n            questions: this.state.questions.slice()\r\n        };\r\n        this.props.onSimpollCreate(simpolll);\r\n    }\r\n\r\n    render(){\r\n        let _questions = [];\r\n        for(let j=0;j<this.state.questions.length;j++){\r\n            let _options = [];\r\n            for(let i=0;i<this.state.questions[j].options.length;i++){\r\n                _options.push(\r\n                    <InputGroup className=\"mb-3\" key={i+1}>\r\n                        <FormControl \r\n                            name=\"choices\"\r\n                            value={this.state.questions[j].options[i]} \r\n                            onChange={this.onOptionChange}\r\n                            data-oidx={i} data-qidx={j}\r\n                            required/>\r\n                        <InputGroup.Append>\r\n                            <Button variant=\"danger\" data-oidx={i} data-qidx={j} onClick={this.deleteOptions}>\r\n                                <span><i className=\"fas fa-minus\"></i></span>\r\n                            </Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                )\r\n            }\r\n\r\n            _questions.push(\r\n                <FormGroup key={j}>\r\n                    <Form.Label>문항 내용</Form.Label>\r\n                    <Form.Control \r\n                        type=\"text\" \r\n                        data-qidx={j}\r\n                        placeholder=\"문항 내용을 입력하세요.\" \r\n                        value = {this.state.questions[j].title}\r\n                        onChange={this.onQuestionTitleChange}\r\n                        required/>\r\n                    <Form.Label>선택지</Form.Label>\r\n                    <Button variant=\"success\" onClick={this.addOptions} data-qidx={j}>\r\n                        <i className=\"fas fa-plus\"></i>\r\n                    </Button>\r\n                    {_options}\r\n                    <br/>\r\n                    <Form.Check \r\n                    inline\r\n                    type=\"checkbox\" \r\n                    name=\"simpolll_type\" \r\n                    value={this.state.questions[j].question_type}\r\n                    onChange = {this.onQuestionTypeChange}\r\n                    data-qidx={j}\r\n                    label=\"복수 선택 여부\"/>\r\n                    <Button variant=\"danger\" onClick={this.deleteQuestions} data-qidx={j}>\r\n                        문항 삭제\r\n                    </Button>\r\n                </FormGroup>\r\n            );\r\n        }\r\n\r\n        return(\r\n            <>\r\n            <Button variant=\"light\" className=\"float-right\" onClick={this.handleShow}>\r\n                <span>\r\n                    <i className=\"fas fa-plus\"></i>\r\n                </span>\r\n            </Button>\r\n            <Modal show={this.state.show} onHide={this.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Make Simpoll</Modal.Title>\r\n                </Modal.Header>\r\n                <Form onSubmit={this.onSimpollCreate}>\r\n                    <Modal.Body>\r\n                        <Form.Group>\r\n                            <Form.Label>Simpoll Name</Form.Label>\r\n                            <Form.Control name=\"title\" type=\"text\" placeholder=\"심폴 이름을 입력하세요.\" required/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>URL</Form.Label>\r\n                            <Form.Control name=\"url_name\" type=\"text\" placeholder=\"URL을 입력하세요.\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>문항</Form.Label>\r\n                            <Button onClick={this.addQuestions}>\r\n                                <i className=\"fas fa-plus\"></i>\r\n                            </Button>\r\n                            {_questions}\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Check \r\n                                inline\r\n                                type=\"checkbox\" \r\n                                name=\"comment_check\" \r\n                                value='1' \r\n                                label=\"Comment 생성 여부\"/>\r\n                            <Form.Check \r\n                                inline\r\n                                type=\"checkbox\" \r\n                                name=\"anonymous_check\" \r\n                                value='1' \r\n                                checked={this.state.anonymousType === '1'}\r\n                                onChange={this.onChangeAnonymousType}\r\n                                readOnly={this.state.anonymousReadOnly}\r\n                                label=\"익명 투표 여부\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>참여 권한</Form.Label>\r\n                            <Form.Check \r\n                                inline\r\n                                type=\"radio\" \r\n                                name=\"part_auth\" \r\n                                value='0' \r\n                                label=\"로그인 한 누구나\"\r\n                                checked={this.state.partAuthType === \"0\"}\r\n                                onChange={this.onChangePartAuthType}/>\r\n                            <Form.Check \r\n                                inline\r\n                                type=\"radio\" \r\n                                name=\"part_auth\" \r\n                                value='1'\r\n                                label=\"링크를 가진 누구나\" \r\n                                checked={this.state.partAuthType === \"1\"}\r\n                                onChange={this.onChangePartAuthType}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>마감 기한</Form.Label>\r\n                            <input type=\"date\" name=\"simpolll_end_date\" required/>\r\n                            <input type=\"time\" name=\"simpolll_end_time\" required/>\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>Close</Button>\r\n                        <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SimpolllModal;\r\n","import React from 'react';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport SimpollList from './SimpollList';\r\nimport RoomList from './RoomList';\r\nimport RoomModal from './RoomModal';\r\nimport SimpollModal from './SimpollModal';\r\nimport './style/Main.css';\r\n\r\nclass MainSpeaker extends React.Component {\r\n    render(){\r\n        return (\r\n            <Container className=\"main-container\">\r\n                <Row>\r\n                    <Col sm={4}>\r\n                        <div className=\"m-2\">\r\n                            <h3 className=\"inline\">Room</h3>\r\n                            <RoomModal onRoomCreate={this.props.onRoomCreate}/>\r\n                        </div>\r\n                        <RoomList\r\n                            data={this.props['room-list-data']}\r\n                            onRoomClick={this.props.onRoomClick}\r\n                            isAudience={false}\r\n                            onRoomDelete={this.props.onRoomDelete}/>\r\n                    </Col>\r\n                    <Col sm={8}>\r\n                        <div className=\"m-2\">\r\n                            <h3 className=\"inline\">Simpoll</h3>\r\n                            <SimpollModal onSimpollCreate={this.props.onSimpollCreate} currentRoomId={this.props.currentRoomId}/>\r\n                        </div>\r\n                        <SimpollList\r\n                            data={this.props['simpoll-list-data']}\r\n                            onSimpollSubmit={this.props['onSimpollSubmit']}\r\n                            isAudience={false}\r\n                            onSimpollDelete={this.props.onSimpollDelete}\r\n                            onSimpollRefresh={this.props.onSimpollRefresh}/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MainSpeaker;\r\n","import React from 'react';\r\nimport {ButtonToolbar, ToggleButtonGroup, ToggleButton} from 'react-bootstrap';\r\nimport './style/ModeButton.css';\r\n\r\nclass ModeButton extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.onViewModeChange = this.onViewModeChange.bind(this);\r\n    }\r\n\r\n    onViewModeChange(e){\r\n        e.preventDefault();\r\n        if(e.currentTarget.dataset.persontype === \"audience\"){\r\n            this.props.onViewModeChange(true);\r\n        }else{\r\n            this.props.onViewModeChange(false);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let _audienceVariant, _speackerVariant;\r\n\r\n        if(this.props.viewmode === \"audience\"){\r\n            _audienceVariant = \"primary\";\r\n            _speackerVariant = \"light\";\r\n        }else{\r\n            _audienceVariant = \"light\";\r\n            _speackerVariant = \"primary\";\r\n        }\r\n        return (\r\n            <ButtonToolbar>\r\n                <ToggleButtonGroup type=\"radio\" name=\"options\">\r\n                    <ToggleButton className=\"button\" variant={_audienceVariant} data-persontype=\"audience\" onClick={this.onViewModeChange}>참여중인 Simpoll</ToggleButton>\r\n                    <ToggleButton className=\"button\" variant={_speackerVariant} data-persontype=\"speaker\" onClick={this.onViewModeChange}>개설한 Simpoll</ToggleButton>\r\n                </ToggleButtonGroup>\r\n            </ButtonToolbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ModeButton;","import React from 'react';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport Navigation from './components/Navigation';\r\nimport AlertBox from './components/AlertBox';\r\nimport SearchBox from './components/SearchBox';\r\nimport MainAudience from './components/MainAudience';\r\nimport MainSpeaker from './components/MainSpeaker';\r\nimport ModeButton from './components/ModeButton';\r\n\r\nclass App extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            viewmode: \"audience\",\r\n            currentRoomId: null,\r\n            user: {\r\n                email: null,\r\n                name: null,\r\n                nickname: null\r\n            },\r\n            searchResult:{\r\n                isLoading: false,\r\n                item: {\r\n                    \"title\":null,\r\n                    \"cur_name\":null\r\n                }\r\n            },\r\n            roomList: {\r\n                isLoading: false,\r\n                items: []\r\n            },\r\n            simpollList: {\r\n                isLoading: false,\r\n                items: []\r\n            },\r\n            alertList: {\r\n                isLoading: false,\r\n                items: []\r\n            }\r\n        }\r\n\r\n        this.fetchTemplate = this.fetchTemplate.bind(this);\r\n        this.getUserInfo = this.getUserInfo.bind(this);\r\n        this.getRoomList = this.getRoomList.bind(this);\r\n        this.changeViewMode = this.changeViewMode.bind(this);\r\n        this.search = this.search.bind(this);\r\n        this.getSimpollList = this.getSimpollList.bind(this);\r\n        this.getSimpoll = this.getSimpoll.bind(this);\r\n        this.submitSimpoll = this.submitSimpoll.bind(this);\r\n        this.createSimpoll = this.createSimpoll.bind(this);\r\n        this.createRoom = this.createRoom.bind(this);\r\n        this.deleteSimpoll = this.deleteSimpoll.bind(this);\r\n        this.deleteRoom = this.deleteRoom.bind(this);\r\n        this.participateRoom = this.participateRoom.bind(this);\r\n        this.parseSimpollList = this.parseSimpollList.bind(this);\r\n        this.parseSimpoll = this.parseSimpoll.bind(this);\r\n        this.parseQuestion = this.parseQuestion.bind(this);\r\n        this.checkUserVoted = this.checkUserVoted.bind(this);\r\n        this.checkDeadlinePassed = this.checkDeadlinePassed.bind(this);\r\n        this.sortSimpollList = this.sortSimpollList.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getUserInfo();\r\n    }\r\n\r\n    fetchTemplate(url, requestBody, loadingState, callback){\r\n        let oldState;\r\n        if(loadingState !== null){\r\n            oldState = this.state;\r\n            this.setState(loadingState);\r\n        }\r\n\r\n        fetch(url,requestBody)\r\n            .then((res)=>{\r\n                return res.json();\r\n            }).then((json)=>{\r\n                return new Promise((resolve, reject)=>{\r\n                    if(json.result == \"success\"){\r\n                        resolve(json.data);\r\n                    }else{\r\n                        reject(new Error(json.message));\r\n                    }\r\n                });\r\n            }).then((data)=>{callback(data)})\r\n            .catch(function(err){\r\n                alert(err.message);\r\n                if(loadingState !== null){\r\n                    this.setState(oldState);\r\n                }\r\n            }.bind(this));\r\n    }\r\n\r\n    getUserInfo(){\r\n        let url = \"/index.php/api/user\";\r\n        // let url = \"/user.json\";\r\n\r\n        this.fetchTemplate(url,null,null,\r\n            function(data){\r\n                this.setState({\r\n                    user: data\r\n                });\r\n\r\n                this.getRoomList(true);\r\n\r\n            }.bind(this));\r\n    }\r\n\r\n    getRoomList(isAudience){\r\n        let url;\r\n        if(isAudience)\r\n            url = \"/index.php/api/user/\"+this.state.user.sid+\"/room?persontype=audience\";\r\n        else\r\n            url = \"/index.php/api/user/\"+this.state.user.sid+\"/room?persontype=speacker\";\r\n\r\n        // let url = \"/roomList.json\"\r\n\r\n        let _roomList = Object.assign({}, this.state.roomList, {isLoading:true});\r\n        this.fetchTemplate(url,null,{roomList:_roomList},\r\n            function(data){\r\n                this.setState({\r\n                    roomList:{\r\n                        isLoading: false,\r\n                        items: data\r\n                    },\r\n                });\r\n\r\n                if(data.length > 0){\r\n                    this.getSimpollList(data[0].sid);\r\n                }\r\n            }.bind(this));\r\n    }\r\n\r\n    changeViewMode(isAudience){\r\n        if(isAudience){\r\n            this.setState({\r\n                viewmode: \"audience\"\r\n            })\r\n        }else{\r\n            this.setState({\r\n                viewmode: \"speaker\"\r\n            })\r\n        }\r\n        this.getRoomList(isAudience);\r\n    }\r\n\r\n    search(searchWord, searchType){\r\n        let loadingState = {\r\n            searchResult:{\r\n                isLoading: true,\r\n                item: {}\r\n            }\r\n        };\r\n\r\n        let url = \"/index.php/api/\";\r\n        if(searchType == \"room\"){\r\n            url += \"room/\";\r\n        }else{\r\n            url += \"simpoll/\";\r\n        }\r\n\r\n        url += searchWord;\r\n\r\n        if(isNaN(searchWord)){\r\n            url += \"?type=url\"\r\n        }else{\r\n            url += \"?type=id\"\r\n        }\r\n\r\n        this.fetchTemplate(url, null,loadingState,\r\n            function(data){\r\n                this.setState({\r\n                    searchResult:{\r\n                        isLoading: false,\r\n                        item: data\r\n                    }\r\n                });\r\n            }.bind(this));\r\n    }\r\n\r\n    // get simpoll list\r\n    getSimpollList(sid){\r\n        this.setState({currentRoomId: sid});\r\n\r\n        let loadingState = {\r\n            simpollList:{\r\n                isLoading: true,\r\n                items: []\r\n            }\r\n        };\r\n\r\n        let url = \"/index.php/api/room/\"+sid+\"/simpoll\";\r\n        // let url = \"/simpollList.json\"\r\n\r\n        this.fetchTemplate(url,null,loadingState,\r\n            function(data){\r\n                if(data.length> 0){\r\n                    data = this.parseSimpollList(data);\r\n                    data = this.sortSimpollList(data);\r\n                    this.setState({\r\n                        simpollList:{\r\n                            isLoading: false,\r\n                            items: data\r\n                        }\r\n                    });\r\n                }else{\r\n                    this.setState({\r\n                        simpollList:{\r\n                            isLoading: false,\r\n                            items: []\r\n                        }\r\n                    });\r\n                }\r\n\r\n            }.bind(this));\r\n    }\r\n\r\n    // get simpoll\r\n    getSimpoll(idx){\r\n        // get simpoll sid\r\n        let simpollId = this.state.simpollList.items[idx].sid;\r\n\r\n        // set url\r\n        let url = \"/index.php/api/simpoll/\"+simpollId;\r\n        // let url = \"/simpoll.json\";\r\n\r\n        // get simpoll result\r\n        this.fetchTemplate(url,null,null,\r\n            function(data){\r\n                data = this.parseSimpoll(data);\r\n                this.state.simpollList.items[idx] = data;\r\n                let _simpollList = this.sortSimpollList(this.state.simpollList.items);\r\n                this.setState({\r\n                    simpollList:{\r\n                        isLoading: false,\r\n                        items: _simpollList\r\n                    }\r\n                });\r\n\r\n            }.bind(this));\r\n    }\r\n\r\n    /*\r\n        options:{\r\n            idx: {simpoll Idx},\r\n            data: [...option_id]\r\n        }\r\n    */\r\n    submitSimpoll(options){\r\n        let idx = options.idx;\r\n        let _option_id = {\r\n            option_id: options.data\r\n        }\r\n        let requestBody = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(_option_id)\r\n        }\r\n\r\n        this.fetchTemplate(\"/index.php/api/option\",requestBody,null,\r\n            function(data){\r\n                this.getSimpoll(idx);\r\n            }.bind(this));\r\n    }\r\n\r\n    /*\r\n        simpoll: {\r\n            \"room_id\":1,\r\n            \"title\": \"simpoll1\",\r\n            \"url_name\": \"url1\",\r\n            \"user_id\":\"1\",\r\n            \"user_nickname\":\"nickname1\",\r\n            \"deadline\": \"2020-03-29 23:00:00\",\r\n            \"is_comment_enbale\": \"0\",\r\n            \"is_anonymous\": \"0\",\r\n            \"part_auth\" : \"0\",\r\n            \"questions\":[\r\n                {\r\n                    \"question_title\":\"question 1\",\r\n                    \"choice_no\":\"4\",\r\n                    \"question_type\":\"0\",\r\n                    \"options\":[\"option1\",\"option2\",\"option3\"]\r\n                },\r\n                {\r\n                    \"question_title\":\"question 2\",\r\n                    \"choice_no\":\"4\",\r\n                    \"question_type\":\"0\",\r\n                    \"options\":[\"option1\",\"option2\",\"option3\"]\r\n                },\r\n                ...\r\n            ]\r\n        }\r\n    */\r\n    createSimpoll(simpoll){\r\n        let requestBody = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(simpoll)\r\n        };\r\n\r\n        this.fetchTemplate(\"/index.php/api/simpoll\",requestBody,null,\r\n            function(data){\r\n                this.getSimpollList(this.state.currentRoomId);\r\n            }.bind(this));\r\n    }\r\n\r\n    createRoom(room){\r\n        room.master = this.state.user.sid;\r\n        room.master_nickname = this.state.user.nickname;\r\n\r\n        let requestBody = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(room)\r\n        };\r\n\r\n        this.fetchTemplate(\"/index.php/api/room\",requestBody,null,\r\n            function(data){\r\n                this.getRoomList(false);\r\n            }.bind(this));\r\n    }\r\n\r\n    deleteSimpoll(simpollId){\r\n        let requestBody = {\r\n            method: 'DELETE'\r\n        };\r\n\r\n        this.fetchTemplate(\"/index.php/api/simpoll/\"+simpollId,requestBody,null,\r\n            function(data){\r\n                this.getSimpollList(this.state.currentRoomId);\r\n            }.bind(this));\r\n    }\r\n\r\n    deleteRoom(roomId){\r\n        let requestBody = {\r\n            method: 'DELETE'\r\n        };\r\n\r\n        this.fetchTemplate(\"/index.php/api/room/\"+roomId,requestBody,null,\r\n            function(data){\r\n                this.getRoomList(false);\r\n            }.bind(this));\r\n    }\r\n\r\n    participateRoom(roomId){\r\n        let url = \"/index.php/api/room/\"+roomId+\"/user\";\r\n        let requestBody = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({user_id:this.state.user.sid})\r\n        };\r\n\r\n        this.fetchTemplate(url,requestBody,null,\r\n            function(data){\r\n                this.changeViewMode(true);\r\n            }.bind(this));\r\n    }\r\n\r\n    /*\r\n        simpoll+question+option 조인된 로우(여러 심폴)들을 simpoll id 순으로 정렬 및 파싱\r\n    */\r\n    parseSimpollList(simpollList){\r\n        // sort\r\n        simpollList.sort(function(s1,s2){\r\n            let simpollId1 = Number(s1.simpoll_id);\r\n            let simpollId2 = Number(s2.simpoll_id);\r\n\r\n            if(simpollId1 >= simpollId2){\r\n                return -1;\r\n            }else if(simpollId1 < simpollId2){\r\n                return 1;\r\n            }\r\n        });\r\n\r\n        // parse\r\n        let parsedSimpllList = [];\r\n        let bIdx = 0;\r\n        let eIdx = 0;\r\n        let beforeSimpollId = simpollList[0].simpoll_id;\r\n        for(eIdx=0;eIdx<simpollList.length;eIdx++){\r\n            if(beforeSimpollId != simpollList[eIdx].simpoll_id){\r\n                let simpoll = simpollList.slice(bIdx,eIdx);\r\n                let parsedSimpoll = this.parseSimpoll(simpoll);\r\n                parsedSimpllList.push(parsedSimpoll);\r\n                bIdx = eIdx;\r\n            }\r\n\r\n            beforeSimpollId = simpollList[eIdx].simpoll_id\r\n        }\r\n        let simpoll = simpollList.slice(bIdx,eIdx);\r\n        let parsedSimpoll = this.parseSimpoll(simpoll);\r\n        parsedSimpllList.push(parsedSimpoll);\r\n\r\n        return parsedSimpllList;\r\n    }\r\n\r\n    /*\r\n        simpoll+question+option 조인된 로우(심폴 하나)들을 question_id 및 option_id 순으로 정렬 및 심폴로 파싱\r\n    */\r\n    parseSimpoll(simpoll){\r\n        this.checkDeadlinePassed(simpoll);\r\n        let parsedSimpoll = {\r\n            sid: simpoll[0].simpoll_id,\r\n            room_id: simpoll[0].room_id,\r\n            title: simpoll[0].simpoll_title,\r\n            url_name: simpoll[0].url_name,\r\n            user_id: simpoll[0].user_id,\r\n            user_nickname: simpoll[0].user_nickname,\r\n            deadline: simpoll[0].deadline,\r\n            is_comment_enable: simpoll[0].is_comment_enable,\r\n            is_anonymous: simpoll[0].is_anonymous,\r\n            part_auth: simpoll[0].part_auth,\r\n            create_date: simpoll[0].create_date,\r\n            questions:[]\r\n        }\r\n\r\n        if(this.state.viewmode === 'audience'){\r\n            let voted = this.checkUserVoted(simpoll);\r\n            parsedSimpoll.voted = voted;\r\n        }\r\n        \r\n\r\n        // sort questions\r\n        simpoll.sort(function(s1,s2){\r\n            let questionId1 = Number(s1.qustion_id);\r\n            let questionId2 = Number(s2.qustion_id);\r\n\r\n            if(questionId1 < questionId2){\r\n                return -1;\r\n            }else if(questionId1 > questionId2){\r\n                return 1;\r\n            }else{\r\n                let optionId1 = Number(s1.option_id);\r\n                let optionId2 = Number(s2.option_id);\r\n                \r\n                if(optionId1 < optionId2){\r\n                    return -1;\r\n                }else{\r\n                    return 1;\r\n                } \r\n            }   \r\n        });\r\n\r\n        // parse\r\n        let bIdx = 0;\r\n        let eIdx = 0;\r\n        let beforeQuestionId = simpoll[0].question_id;\r\n        for(eIdx=0;eIdx<simpoll.length;eIdx++){\r\n            if(beforeQuestionId != simpoll[eIdx].question_id){\r\n                let question = simpoll.slice(bIdx, eIdx);\r\n                let parsedQuestion = this.parseQuestion(question);\r\n                parsedSimpoll.questions.push(parsedQuestion);\r\n                bIdx = eIdx;\r\n            }\r\n\r\n            beforeQuestionId = simpoll[eIdx].question_id;\r\n        }\r\n\r\n        let question = simpoll.slice(bIdx, eIdx);\r\n        let parsedQuestion = this.parseQuestion(question);\r\n        parsedSimpoll.questions.push(parsedQuestion);\r\n\r\n        return parsedSimpoll\r\n    }\r\n\r\n    /*\r\n        simpoll+question+option 조인된 로우(문항 하나)들을 문항으로 파싱\r\n    */\r\n    parseQuestion(question){\r\n        let parsedQuestion = {\r\n            sid: question[0].question_id,\r\n            question_title: question[0].question_title,\r\n            choice_no: question[0].choice_no,\r\n            question_type: question[0].question_type,\r\n            options: []\r\n        }\r\n\r\n        // parse\r\n        for(let i=0;i<question.length;i++){\r\n            let option = {\r\n                option_name: question[i].option_name,\r\n                option_id: question[i].option_id,\r\n                option_user_id: question[i].option_user_id.split('|'),\r\n                option_user_nickname: question[i].option_user_nickname.split('|'),\r\n                count: question[i].option_count\r\n            };\r\n\r\n            if(this.state.viewmode === 'audience'){\r\n                option.voted = false;\r\n                for(let j=0;j<option.option_user_id.length;j++){\r\n                    if(option.option_user_id[j] === this.state.user.sid){\r\n                        option.voted = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            parsedQuestion.options.push(option);\r\n        }\r\n\r\n        // sort options\r\n        parsedQuestion.options.sort(function(o1,o2){\r\n            let optionId1 = Number(o1.option_id);\r\n            let optionId2 = Number(o2.option_id);\r\n\r\n            if(optionId1< optionId2){\r\n                return -1;\r\n            }else{\r\n                return 1;\r\n            }\r\n        });\r\n\r\n        return parsedQuestion;\r\n    }\r\n\r\n    /*\r\n        simpoll+question+option 조인된 로우(심폴 하나)들의 마감기간 지난 여부를 확인\r\n    */\r\n    checkDeadlinePassed(simpoll){\r\n        let curDate = new Date();\r\n        let deadlineDate = new Date(simpoll[0].deadline);\r\n        if(deadlineDate <= curDate)\r\n            simpoll[0].isDeadlinePass = true;\r\n        else\r\n            simpoll[0].isDeadlinePass = false;\r\n    }\r\n\r\n    /*\r\n        simpoll+question+option 조인된 로우(심폴 하나)들의 투표 여부를 확인\r\n    */\r\n    checkUserVoted(simpoll){\r\n        for(let i=0;i<simpoll.length;i++){\r\n            let optionUserId = simpoll[i].option_user_id.split('|');\r\n            for(let j=0;j<optionUserId.length;j++){\r\n                if(optionUserId[j] === this.state.user.sid)\r\n                    return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /*\r\n        구조화된 simpoll들의 리스트를 정렬\r\n    */\r\n    sortSimpollList(simpollList){\r\n        // viewmode 가 청중일시 voted 여부와 deadline pass 여부 그리고 simpoll id를 기준으로 정렬\r\n        if(this.state.viewmode === 'audience'){\r\n            simpollList.sort(function(s1,s2){\r\n                let votedOrDeadlinePassed1 = s1.voted || s1.isDeadlinePass;\r\n                let votedOrDeadlinePassed2 = s2.voted || s2.isDeadlinePass;\r\n\r\n                if(!votedOrDeadlinePassed1 && votedOrDeadlinePassed2){\r\n                    return -1;\r\n                }else if(votedOrDeadlinePassed1 && !votedOrDeadlinePassed2){\r\n                    return 1;\r\n                }else{\r\n                    let simpollId1 = Number(s1.sid);\r\n                    let simpollId2 = Number(s2.sid);\r\n                    if(simpollId1 < simpollId2){\r\n                        return 1;\r\n                    }else{\r\n                        return -1;\r\n                    }\r\n                }\r\n            });\r\n\r\n        // viewmode 가 강연자일시 deadline pass 여부 그리고 simpoll id를 기준으로 정렬\r\n        }else{\r\n            simpollList.sort(function(s1,s2){\r\n                if(!s1.isDeadlinePass && s2.isDeadlinePass){\r\n                    return -1;\r\n                }else if(s1.isDeadlinePass && !s2.isDeadlinePass){\r\n                    return 1;\r\n                }else{\r\n                    let simpollId1 = Number(s1.sid);\r\n                    let simpollId2 = Number(s2.sid);\r\n                    if(simpollId1 < simpollId2){\r\n                        return 1;\r\n                    }else{\r\n                        return -1;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        return simpollList;\r\n    }\r\n\r\n    render() {\r\n        let _main = null;\r\n        if(this.state.viewmode == 'audience'){\r\n            _main = <MainAudience\r\n                        room-list-data={this.state.roomList}\r\n                        onRoomClick={this.getSimpollList}\r\n                        simpoll-list-data={this.state.simpollList}\r\n                        onSimpollSubmit={this.submitSimpoll}\r\n                        onUpdateChoice={this.updateChoice}\r\n                        onSimpollRefresh={this.getSimpoll}\r\n                    />;\r\n        }else{\r\n            _main = <MainSpeaker\r\n                        room-list-data={this.state.roomList}\r\n                        onRoomClick={this.getSimpollList}\r\n                        simpoll-list-data={this.state.simpollList}\r\n                        onSimpollCreate={this.createSimpoll}\r\n                        onRoomCreate={this.createRoom}\r\n                        onSimpollDelete={this.deleteSimpoll}\r\n                        onRoomDelete={this.deleteRoom}\r\n                        onSimpollRefresh={this.getSimpoll}\r\n                        currentRoomId={this.state.currentRoomId}\r\n                    />\r\n        }\r\n\r\n        return (\r\n            <Container className=\"p-0\">\r\n                <Navigation user={this.state.user} href=\"/index.php/home\">Simpoll</Navigation>\r\n                <Row className=\"m-2\">\r\n                    <Col xs={12} md={6} className=\"p-1\">\r\n                        <AlertBox data={this.alertList}/>\r\n                    </Col>\r\n                    <Col xs={12} md={6} className=\"p-1\">\r\n                        <SearchBox onSubmit={this.search} data={this.state.searchResult} addRoom={this.participateRoom}/>\r\n                    </Col>\r\n                </Row>\r\n                <ModeButton viewmode={this.state.viewmode} onViewModeChange={this.changeViewMode} />\r\n\r\n                <Row className=\"m-2\">\r\n                    {_main}\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}